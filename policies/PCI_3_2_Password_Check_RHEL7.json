{
    "policy": {
        "name": "pci_32_password_check-rhel_7",
        "short_description": "PCI 3.2 Password Check - RHEL 7",
        "description": "",
        "settings": {
            "tests": {
                "output_format": null
            }
        },
        "operating_system_family_id": null,
        "operating_system_id": null,
        "type": null
    },
    "data": [
        {
            "8.1.1 Assign all users a unique ID before allowing them to access system components": [
                {
                    "id": "8-1-1-Assign-all-users-a-unique-ID-before-allowing-them-to-access-system-componentsVerify-that-there-are-not-repeated-user-names",
                    "name": "Verify that there are not repeated user names",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "check": "regex",
                                "expected": "^(?![\\s\\S])",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/passwd | cut -d ':' -f1 | sort | uniq -d"
                    },
                    "check_type": "scripts",
                    "description": "Verify that there are not repeated user names",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-1-1-Assign-all-users-a-unique-ID-before-allowing-them-to-access-system-componentsVerify-that-there-are-no-repeated-User-IDs",
                    "name": "Verify that there are no repeated User IDs",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "^(?![\\s\\S])",
                                "check": "regex",
                                "expected": "^(?![\\s\\S])"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/passwd | cut -d ':' -f3 | sort | uniq -d"
                    },
                    "check_type": "scripts",
                    "description": "Verify that there are no repeated User IDs",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-1-1-Assign-all-users-a-unique-ID-before-allowing-them-to-access-system-componentsVerify-that-there-are-not-repeated-group-names",
                    "name": "Verify that there are not repeated group names",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "^(?![\\s\\S])",
                                "check": "regex",
                                "expected": "^(?![\\s\\S])"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/group | cut -d ':' -f1 | sort | uniq -d"
                    },
                    "check_type": "scripts",
                    "description": "Verify that there are not repeated group names",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-1-1-Assign-all-users-a-unique-ID-before-allowing-them-to-access-system-componentsVerify-that-there-are-no-repeated-Group-IDs",
                    "name": "Verify that there are no repeated Group IDs",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "check": "regex",
                                "expected": "^(?![\\s\\S])",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/group | cut -d ':' -f3 | sort | uniq -d"
                    },
                    "check_type": "scripts",
                    "description": "Verify that there are no repeated Group IDs",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "8.1.4 Find and remove/disable inactive user accounts within 90 days.": [
                {
                    "id": "8-1-4-Find-and-remove-disable-inactive-user-accounts-within-90-days-Count-the-number-of-users-that-have-not-logged-in-for-the-last-90-days-",
                    "name": "Count the number of users that have not logged in for the last 90 days.",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "check": "regex",
                                "expected": "^(?![\\s\\S])",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "echo \"root $( grep bash /etc/passwd | cut -d: -f1 ) $( lastlog -t 90 | tail -n +2 | cut -d\" \" -f1 )\" | sed \"s/ /\\n/g\" | sort | uniq -u"
                    },
                    "check_type": "scripts",
                    "description": "Count the number of users that have not logged in for the last 90 days.",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "8.1.6 Limit repeated access attempts by locking out the user ID after not more than six attempts.": [
                {
                    "id": "8-1-6-Limit-repeated-access-attempts-by-locking-out-the-user-ID-after-not-more-than-six-attempts-preauth-Verify-the-configuration-of-etc-pam-d-system-auth-and-confirm-the-number-of-failed-login-attempts-allowed",
                    "name": "preauth: Verify the configuration of /etc/pam.d/system-auth and confirm the number of failed login attempts allowed",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "1"
                                    }
                                ],
                                "check": "conditional",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_faillock.so | grep deny  | egrep ' *= *([0-6] )' | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "preauth: Verify the configuration of /etc/pam.d/system-auth and confirm the number of failed login attempts allowed",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-1-6-Limit-repeated-access-attempts-by-locking-out-the-user-ID-after-not-more-than-six-attempts-preauth-Verify-the-configuration-of-etc-pam-d-password-auth-and-confirm-the-number-of-failed-login-attempts-allowed",
                    "name": "preauth : Verify the configuration of /etc/pam.d/password-auth and confirm the number of failed login attempts allowed",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "1"
                                    }
                                ],
                                "check": "conditional",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/pam.d/password-auth | grep pam_faillock.so | grep deny  | egrep ' *= *([0-6] )' | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "preauth : Verify the configuration of /etc/pam.d/password-auth and confirm the number of failed login attempts allowed",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "8.1.7 Set the lockout duration to a minimum of 30 minutes or until an administrator enables the user ID.": [
                {
                    "id": "8-1-7-Set-the-lockout-duration-to-a-minimum-of-30-minutes-or-until-an-administrator-enables-the-user-ID-preauth-Verify-the-configuration-of-etc-pam-d-system-auth-and-confirm-the-account-lockout-time-parameter",
                    "name": "preauth : Verify the configuration of /etc/pam.d/system-auth and confirm the account lockout time parameter",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "1"
                                    }
                                ],
                                "check": "conditional",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_faillock.so | grep unlock_time | egrep ' *= *([1600]) ' | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "preauth : Verify the configuration of /etc/pam.d/system-auth and confirm the account lockout time parameter",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-1-7-Set-the-lockout-duration-to-a-minimum-of-30-minutes-or-until-an-administrator-enables-the-user-ID-preauth-Verify-the-configuration-of-etc-pam-d-password-auth-and-confirm-the-account-lockout-time-parameter",
                    "name": "preauth : Verify the configuration of /etc/pam.d/password-auth and confirm the account lockout time parameter",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "1"
                                    }
                                ],
                                "check": "conditional",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/pam.d/password-auth | grep pam_faillock.so | grep unlock_time  | egrep ' *= *([1600]) ' | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "preauth : Verify the configuration of /etc/pam.d/password-auth and confirm the account lockout time parameter",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "8.1.8 If a session has been idle for more than 15 minutes, require the user to re-authenticate to re-activate the terminal or session.": [
                {
                    "id": "8-1-8-If-a-session-has-been-idle-for-more-than-15-minutes-require-the-user-to-re-authenticate-to-re-activate-the-terminal-or-session-Verify-that-the-console-is-setup-to-terminate-idle-sessions-after-15-minutes",
                    "name": "Verify that the console is setup to terminate idle sessions after 15 minutes",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "exp": "",
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "90"
                                    }
                                ],
                                "check": "conditional",
                                "expected": ""
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\"  /etc/login.defs | grep PASS_MAX_DAYS | awk '{print $2}'"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the console is setup to terminate idle sessions after 15 minutes",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-1-8-If-a-session-has-been-idle-for-more-than-15-minutes-require-the-user-to-re-authenticate-to-re-activate-the-terminal-or-session-Verify-that-the-ssh-server-is-setup-to-terminate-idle-sessions-after-15-minutes",
                    "name": "Verify that the ssh server is setup to terminate idle sessions after 15 minutes",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "exp": "",
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "900"
                                    }
                                ],
                                "check": "conditional",
                                "expected": ""
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "sudo grep ClientAliveInterval /etc/ssh/sshd_config | grep -v \"^[[:space:]]*#\" | awk '{print $2}'"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the ssh server is setup to terminate idle sessions after 15 minutes",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-1-8-If-a-session-has-been-idle-for-more-than-15-minutes-require-the-user-to-re-authenticate-to-re-activate-the-terminal-or-session-Verify-that-the-ssh-server-will-not-try-to-keep-alive-idle-connections",
                    "name": "Verify that the ssh server will not try to keep alive idle connections",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "check": "equals",
                                "expected": "1",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "sudo grep ClientAliveCountMax /etc/ssh/sshd_config | grep -v \"^[[:space:]]*#\" | grep 0 | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the ssh server will not try to keep alive idle connections",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-1-8-If-a-session-has-been-idle-for-more-than-15-minutes-require-the-user-to-re-authenticate-to-re-activate-the-terminal-or-session-whoami-command",
                    "name": "whoami command",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "check": "equals",
                                "expected": "true"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "whoami"
                    },
                    "check_type": "scripts",
                    "description": "whoami command",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "8.2.3 Passwords/passphrases must meet strong requirements": [
                {
                    "id": "8-2-3-Passwords-passphrases-must-meet-strong-requirementsVerify-that-the-PAM-password-quality-module-is-enabled-on-etc-pam-d-system-auth",
                    "name": "Verify that the PAM password quality module is enabled on /etc/pam.d/system-auth",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "check": "equals",
                                "expected": "1",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep pam_pwquality.so /etc/pam.d/system-auth | grep -v \"^[[:space:]]*#\" |  wc -l"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the PAM password quality module is enabled on /etc/pam.d/system-auth",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-2-3-Passwords-passphrases-must-meet-strong-requirementsVerify-that-the-PAM-password-quality-module-is-enabled-on-etc-pam-d-password-auth",
                    "name": "Verify that the PAM password quality module is enabled on /etc/pam.d/password-auth",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "check": "equals",
                                "expected": "1",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep pam_pwquality.so /etc/pam.d/password-auth | grep -v \"^[[:space:]]*#\" | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the PAM password quality module is enabled on /etc/pam.d/password-auth",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-2-3-Passwords-passphrases-must-meet-strong-requirementsThe-minimal-password-length-is-7-characters",
                    "name": "The minimal password length is 7 characters",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "check": "equals",
                                "expected": "1",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep \"minlen=7\" | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "The minimal password length is 7 characters",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-2-3-Passwords-passphrases-must-meet-strong-requirementsPasswords-should-have-at-least-1-digit",
                    "name": "Passwords should have at least 1 digit",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "check": "equals",
                                "expected": "1",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep \"dcredit=-1\" | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "Passwords should have at least 1 digit",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-2-3-Passwords-passphrases-must-meet-strong-requirementsPasswords-should-have-at-least-one-uppercase-letters",
                    "name": "Passwords should have at least one uppercase letters",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "check": "equals",
                                "expected": "1",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep \"ucredit=-1\" | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "Passwords should have at least one uppercase letters",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-2-3-Passwords-passphrases-must-meet-strong-requirementsPasswords-should-have-at-least-1-lowercase-letters",
                    "name": "Passwords should have at least 1 lowercase letters",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "check": "equals",
                                "expected": "1",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep \"lcredit=-1\" | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "Passwords should have at least 1 lowercase letters",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "8.2.4 Change user passwords/passphrases at least once every 90 days.": [
                {
                    "id": "8-2-4-Change-user-passwords-passphrases-at-least-once-every-90-days-All-users-should-change-their-password-every-90-days-by-default",
                    "name": "All users should change their password every 90 days by default",
                    "error": false,
                    "checks": {
                        "Value": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "90"
                                    }
                                ],
                                "check": "conditional",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/login.defs | grep PASS_MAX_DAYS | awk '{print $2}'"
                    },
                    "check_type": "scripts",
                    "description": "All users should change their password every 90 days by default",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "8.2.5 Do not allow an individual to submit a new password/passphrase that is the same as any of the last four passwords/passphrases he or she has used.": [
                {
                    "id": "8-2-5-Do-not-allow-an-individual-to-submit-a-new-password-passphrase-that-is-the-same-as-any-of-the-last-four-passwords-passphrases-he-or-she-has-used-Verify-that-the-file-opasswd-exists-and-has-the-correct-permissions-and-SELinux-context",
                    "name": "Verify that the file \"opasswd\" exists and has the correct permissions and SELinux context",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "check": "equals",
                                "expected": "true"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "ls -ldZ /etc/security/opasswd"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the file \"opasswd\" exists and has the correct permissions and SELinux context",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "8-2-5-Do-not-allow-an-individual-to-submit-a-new-password-passphrase-that-is-the-same-as-any-of-the-last-four-passwords-passphrases-he-or-she-has-used-Verify-that-the-PAM-module-is-setup-correctly-",
                    "name": "Verify that the PAM module is setup correctly.",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "check": "equals",
                                "expected": "true"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep pam_pwhistory.so /etc/pam.d/system-auth | grep -v \"^[[:space:]]*#\" | grep \"use_authtok\" | grep \"remember=4\""
                    },
                    "check_type": "scripts",
                    "description": "Verify that the PAM module is setup correctly.",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "Policy Version": [
                {
                    "name": "Policy Version",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "check": "equals",
                                "expected": "true"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "echo \"20170927-0\""
                    },
                    "check_type": "scripts",
                    "description": "Policy Version"
                }
            ]
        }
    ],
    "scan_options": {
        "scripts": [
            {
                "description": "8.1.1 Assign all users a unique ID before allowing them to access system components, Verify that there are not repeated user names",
                "script": "grep -v \"^[[:space:]]*#\" /etc/passwd | cut -d ':' -f1 | sort | uniq -d"
            },
            {
                "description": "8.1.1 Assign all users a unique ID before allowing them to access system components, Verify that there are no repeated User IDs",
                "script": "grep -v \"^[[:space:]]*#\" /etc/passwd | cut -d ':' -f3 | sort | uniq -d"
            },
            {
                "description": "8.1.1 Assign all users a unique ID before allowing them to access system components, Verify that there are not repeated group names",
                "script": "grep -v \"^[[:space:]]*#\" /etc/group | cut -d ':' -f1 | sort | uniq -d"
            },
            {
                "description": "8.1.1 Assign all users a unique ID before allowing them to access system components, Verify that there are no repeated Group IDs",
                "script": "grep -v \"^[[:space:]]*#\" /etc/group | cut -d ':' -f3 | sort | uniq -d"
            },
            {
                "description": "8.1.4 Find and remove/disable inactive user accounts within 90 days., Count the number of users that have not logged in for the last 90 days.",
                "script": "echo \"root $( grep bash /etc/passwd | cut -d: -f1 ) $( lastlog -t 90 | tail -n +2 | cut -d\" \" -f1 )\" | sed \"s/ /\\n/g\" | sort | uniq -u"
            },
            {
                "description": "8.1.6 Limit repeated access attempts by locking out the user ID after not more than six attempts., preauth: Verify the configuration of /etc/pam.d/system-auth and confirm the number of failed login attempts allowed",
                "script": "grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_faillock.so | grep deny  | egrep ' *= *([0-6] )' | wc -l"
            },
            {
                "description": "8.1.6 Limit repeated access attempts by locking out the user ID after not more than six attempts., preauth : Verify the configuration of /etc/pam.d/password-auth and confirm the number of failed login attempts allowed",
                "script": "grep -v \"^[[:space:]]*#\" /etc/pam.d/password-auth | grep pam_faillock.so | grep deny  | egrep ' *= *([0-6] )' | wc -l"
            },
            {
                "description": "8.1.7 Set the lockout duration to a minimum of 30 minutes or until an administrator enables the user ID., preauth : Verify the configuration of /etc/pam.d/system-auth and confirm the account lockout time parameter",
                "script": "grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_faillock.so | grep unlock_time | egrep ' *= *([1600]) ' | wc -l"
            },
            {
                "description": "8.1.7 Set the lockout duration to a minimum of 30 minutes or until an administrator enables the user ID., preauth : Verify the configuration of /etc/pam.d/password-auth and confirm the account lockout time parameter",
                "script": "grep -v \"^[[:space:]]*#\" /etc/pam.d/password-auth | grep pam_faillock.so | grep unlock_time  | egrep ' *= *([1600]) ' | wc -l"
            },
            {
                "description": "8.1.8 If a session has been idle for more than 15 minutes, require the user to re-authenticate to re-activate the terminal or session., Verify that the console is setup to terminate idle sessions after 15 minutes",
                "script": "grep -v \"^[[:space:]]*#\"  /etc/login.defs | grep PASS_MAX_DAYS | awk '{print $2}'"
            },
            {
                "description": "8.1.8 If a session has been idle for more than 15 minutes, require the user to re-authenticate to re-activate the terminal or session., Verify that the ssh server is setup to terminate idle sessions after 15 minutes",
                "script": "sudo grep ClientAliveInterval /etc/ssh/sshd_config | grep -v \"^[[:space:]]*#\" | awk '{print $2}'"
            },
            {
                "description": "8.1.8 If a session has been idle for more than 15 minutes, require the user to re-authenticate to re-activate the terminal or session., Verify that the ssh server will not try to keep alive idle connections",
                "script": "sudo grep ClientAliveCountMax /etc/ssh/sshd_config | grep -v \"^[[:space:]]*#\" | grep 0 | wc -l"
            },
            {
                "description": "8.1.8 If a session has been idle for more than 15 minutes, require the user to re-authenticate to re-activate the terminal or session., whoami command",
                "script": "whoami"
            },
            {
                "description": "8.2.3 Passwords/passphrases must meet strong requirements, Verify that the PAM password quality module is enabled on /etc/pam.d/system-auth",
                "script": "grep pam_pwquality.so /etc/pam.d/system-auth | grep -v \"^[[:space:]]*#\" |  wc -l"
            },
            {
                "description": "8.2.3 Passwords/passphrases must meet strong requirements, Verify that the PAM password quality module is enabled on /etc/pam.d/password-auth",
                "script": "grep pam_pwquality.so /etc/pam.d/password-auth | grep -v \"^[[:space:]]*#\" | wc -l"
            },
            {
                "description": "8.2.3 Passwords/passphrases must meet strong requirements, The minimal password length is 7 characters",
                "script": "grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep \"minlen=7\" | wc -l"
            },
            {
                "description": "8.2.3 Passwords/passphrases must meet strong requirements, Passwords should have at least 1 digit",
                "script": "grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep \"dcredit=-1\" | wc -l"
            },
            {
                "description": "8.2.3 Passwords/passphrases must meet strong requirements, Passwords should have at least one uppercase letters",
                "script": "grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep \"ucredit=-1\" | wc -l"
            },
            {
                "description": "8.2.3 Passwords/passphrases must meet strong requirements, Passwords should have at least 1 lowercase letters",
                "script": "grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep \"lcredit=-1\" | wc -l"
            },
            {
                "description": "8.2.4 Change user passwords/passphrases at least once every 90 days., All users should change their password every 90 days by default",
                "script": "grep -v \"^[[:space:]]*#\" /etc/login.defs | grep PASS_MAX_DAYS | awk '{print $2}'"
            },
            {
                "description": "8.2.5 Do not allow an individual to submit a new password/passphrase that is the same as any of the last four passwords/passphrases he or she has used., Verify that the file \"opasswd\" exists and has the correct permissions and SELinux context",
                "script": "ls -ldZ /etc/security/opasswd"
            },
            {
                "description": "8.2.5 Do not allow an individual to submit a new password/passphrase that is the same as any of the last four passwords/passphrases he or she has used., Verify that the PAM module is setup correctly.",
                "script": "grep pam_pwhistory.so /etc/pam.d/system-auth | grep -v \"^[[:space:]]*#\" | grep \"use_authtok\" | grep \"remember=4\""
            },
            {
                "description": "Policy Version, Policy Version",
                "script": "echo \"20170927-0\""
            }
        ]
    }
}