{
    "policy": {
        "name": "pci_32_password_check-rhel_7",
        "short_description": "PCI 3.2 Password Check - RHEL 7",
        "description": "",
        "settings": {
            "tests": {
                "output_format": null
            }
        },
        "operating_system_family_id": null,
        "operating_system_id": null,
        "type": null
    },
    "data": [
        {
            "PCI: Password Check -- 8.1.1 Assign all users a unique ID before allowing them to access system components": [
                {
                    "id": "PCI-Password-Check-8-1-1-Assign-all-users-a-unique-ID-before-allowing-them-to-access-system-componentsVerify-that-there-are-not-repeated-user-names",
                    "name": "Verify that there are not repeated user names",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "^(?![\\s\\S])",
                                "check": "regex",
                                "expected": "^(?![\\s\\S])",
                                "background": "Although the useradd program will not let you create a duplicate user name, it is possible for an administrator to manually edit the /etc/passwd file and change the user name.",
                                "remediation": "Based on the results of the audit script, establish unique user names for the users. File ownerships will automatically reflect the change as long as the users have unique UIDs"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/passwd | cut -d ':' -f1 | sort | uniq -d"
                    },
                    "check_type": "scripts",
                    "description": "Verify that there are not repeated user names",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-1-1-Assign-all-users-a-unique-ID-before-allowing-them-to-access-system-componentsVerify-that-there-are-no-repeated-User-IDs",
                    "name": "Verify that there are no repeated User IDs",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "^(?![\\s\\S])",
                                "check": "regex",
                                "expected": "^(?![\\s\\S])",
                                "background": "Although the useradd program will not let you create a duplicate User ID (UID), it is possible for an administrator to manually edit the /etc/passwd file and change the UID field.",
                                "remediation": "Based on the results of the audit script, establish unique UIDs and review all files owned by the shared UIDs to determine which UID they are supposed to belong to."
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/passwd | cut -d ':' -f3 | sort | uniq -d"
                    },
                    "check_type": "scripts",
                    "description": "Verify that there are no repeated User IDs",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-1-1-Assign-all-users-a-unique-ID-before-allowing-them-to-access-system-componentsVerify-that-there-are-not-repeated-group-names",
                    "name": "Verify that there are not repeated group names",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "^(?![\\s\\S])",
                                "check": "regex",
                                "expected": "^(?![\\s\\S])",
                                "background": "Although the groupadd program will not let you create a duplicate group name, it is possible for an administrator to manually edit the /etc/group file and change the group name.",
                                "remediation": "Based on the results of the audit script, establish unique names for the user groups. File group ownerships will automatically reflect the change as long as the groups have unique GIDs."
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/group | cut -d ':' -f1 | sort | uniq -d"
                    },
                    "check_type": "scripts",
                    "description": "Verify that there are not repeated group names",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-1-1-Assign-all-users-a-unique-ID-before-allowing-them-to-access-system-componentsVerify-that-there-are-no-repeated-Group-IDs",
                    "name": "Verify that there are no repeated Group IDs",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "^(?![\\s\\S])",
                                "check": "regex",
                                "expected": "^(?![\\s\\S])",
                                "background": "Although the groupadd program will not let you create a duplicate Group ID (GID), it is possible for an administrator to manually edit the /etc/group file and change the GID field.",
                                "remediation": "Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to determine which group they are supposed to belong to."
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/group | cut -d ':' -f3 | sort | uniq -d"
                    },
                    "check_type": "scripts",
                    "description": "Verify that there are no repeated Group IDs",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "PCI: Password Check -- 8.1.4 Find and remove/disable inactive user accounts within 90 days.": [
                {
                    "id": "PCI-Password-Check-8-1-4-Find-and-remove-disable-inactive-user-accounts-within-90-days-Count-the-number-of-users-that-have-not-logged-in-for-the-last-90-days-",
                    "name": "Count the number of users that have not logged in for the last 90 days.",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "^(?![\\s\\S])",
                                "check": "regex",
                                "expected": "^(?![\\s\\S])",
                                "background": "The organization should disable IDs that have not been used for a specified period of time to protect the system and data against unauthorized use.. (T36.2(2), FISC Security Guidelines on Computer Systems for Banking and Related Financial Institutions, 7th Edition)",
                                "remediation": "Investigate dormant accounts"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "echo -n \"root $( grep bash /etc/passwd | cut -d: -f1 ) $( lastlog -t 90 | tail -n +2 | cut -d\" \" -f1 )\" | sed \"s/ /\\n/g\" | sort | uniq -u"
                    },
                    "check_type": "scripts",
                    "description": "Count the number of users that have not logged in for the last 90 days.",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "PCI: Password Check -- 8.1.6 Limit repeated access attempts by locking out the user ID after not more than six attempts.": [
                {
                    "id": "PCI-Password-Check-8-1-6-Limit-repeated-access-attempts-by-locking-out-the-user-ID-after-not-more-than-six-attempts-Verify-the-configuration-of-etc-pam-d-system-auth-and-confirm-the-number-of-failed-login-attempts-allowed",
                    "name": "Verify the configuration of /etc/pam.d/system-auth and confirm the number of failed login attempts allowed",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": "<=",
                                        "val": "6"
                                    }
                                ],
                                "check": "conditional",
                                "background": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
                                "remediation": "Edit the /etc/pam.d/password-auth and /etc/pam.d/system-auth files and add the following pam_faillock.so lines surrounding a pam_unix.so line modify the pam_unix.so is [success=1 default=bad] as listed in both: auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900 auth [success=1 default=bad] pam_unix.so auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900 auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_faillock.so | grep deny | tail -1`;  y=`expr \"$x\"  : '\\(.*[d][e][n][y] *= *[1-9][0-9]* *\\)'`;  echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "Verify the configuration of /etc/pam.d/system-auth and confirm the number of failed login attempts allowed",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-1-6-Limit-repeated-access-attempts-by-locking-out-the-user-ID-after-not-more-than-six-attempts-Verify-the-configuration-of-etc-pam-d-password-auth-and-confirm-the-number-of-failed-login-attempts-allowed",
                    "name": "Verify the configuration of /etc/pam.d/password-auth and confirm the number of failed login attempts allowed",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": "<=",
                                        "val": "6"
                                    }
                                ],
                                "check": "conditional",
                                "background": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
                                "remediation": "Edit the /etc/pam.d/password-auth and /etc/pam.d/system-auth files and add the following pam_faillock.so lines surrounding a pam_unix.so line modify the pam_unix.so is [success=1 default=bad] as listed in both: auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900 auth [success=1 default=bad] pam_unix.so auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900 auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/password-auth | grep pam_faillock.so | grep deny | tail -1`; y=`expr \"$x\" : '\\(.*[d][e][n][y] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "Verify the configuration of /etc/pam.d/password-auth and confirm the number of failed login attempts allowed",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "PCI: Password Check -- 8.1.7 Set the lockout duration to a minimum of 30 minutes or until an administrator enables the user ID.": [
                {
                    "id": "PCI-Password-Check-8-1-7-Set-the-lockout-duration-to-a-minimum-of-30-minutes-or-until-an-administrator-enables-the-user-ID-Verify-the-configuration-of-etc-pam-d-system-auth-and-confirm-the-account-lockout-time-parameter",
                    "name": "Verify the configuration of /etc/pam.d/system-auth and confirm the account lockout time parameter",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "600"
                                    }
                                ],
                                "check": "conditional",
                                "background": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
                                "remediation": "following pam_faillock.so lines surrounding a pam_unix.so line modify the pam_unix.so is [success=1 default=bad] as listed in both: auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900 auth [success=1 default=bad] pam_unix.so auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900 auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900\nNotes:\n279 | P a g e\nAdditional module options may be set, recommendation only covers those listed here.\nIf a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset respectively. This command sets the failed count to 0, effectively unlocking the user."
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_faillock.so | grep unlock_time | tail -1`; y=`expr \"$x\" : '\\(.*[u][n][l][o][c][k][_][t][i][m][e] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "Verify the configuration of /etc/pam.d/system-auth and confirm the account lockout time parameter",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-1-7-Set-the-lockout-duration-to-a-minimum-of-30-minutes-or-until-an-administrator-enables-the-user-ID-Verify-the-configuration-of-etc-pam-d-password-auth-and-confirm-the-account-lockout-time-parameter",
                    "name": "Verify the configuration of /etc/pam.d/password-auth and confirm the account lockout time parameter",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "600"
                                    }
                                ],
                                "check": "conditional",
                                "background": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
                                "remediation": "following pam_faillock.so lines surrounding a pam_unix.so line modify the pam_unix.so is [success=1 default=bad] as listed in both: auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900 auth [success=1 default=bad] pam_unix.so auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900 auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900\nNotes:\n279 | P a g e\nAdditional module options may be set, recommendation only covers those listed here.\nIf a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset respectively. This command sets the failed count to 0, effectively unlocking the user."
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/password-auth | grep pam_faillock.so | grep unlock_time | tail -1`; y=`expr \"$x\" : '\\(.*[u][n][l][o][c][k][_][t][i][m][e] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "Verify the configuration of /etc/pam.d/password-auth and confirm the account lockout time parameter",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "PCI: Password Check -- 8.1.8 If a session has been idle for more than 15 minutes, require the user to re-authenticate to re-activate the terminal or session.": [
                {
                    "id": "PCI-Password-Check-8-1-8-If-a-session-has-been-idle-for-more-than-15-minutes-require-the-user-to-re-authenticate-to-re-activate-the-terminal-or-session-Verify-that-the-ssh-server-is-setup-to-terminate-idle-sessions-after-15-minutes",
                    "name": "Verify that the ssh server is setup to terminate idle sessions after 15 minutes",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "",
                                "cond": [
                                    {
                                        "op": "<=",
                                        "val": "300"
                                    }
                                ],
                                "check": "conditional",
                                "expected": "",
                                "background": "The two options ClientAliveInterval and ClientAliveCountMax control the timeout of ssh sessions. When the ClientAliveInterval variable is set, ssh sessions that have no activity for the specified length of time are terminated. When the ClientAliveCountMax variable is set, sshd will send client alive messages at every ClientAliveInterval interval. When the number of consecutive client alive messages are sent with no response from the client, the ssh session is terminated. For example, if the ClientAliveInterval is set to 15 seconds and the ClientAliveCountMax is set to 3, the client ssh session will be terminated after 45 seconds of idle time.\n\nHaving no timeout value associated with a connection could allow an unauthorized user access to another user's ssh session (e.g. user walks away from their computer and doesn't lock the screen). Setting a timeout value at least reduces the risk of this happening..\nWhile the recommended setting is 300 seconds (5 minutes), set this timeout value based on site policy. The recommended setting for ClientAliveCountMax is 0. In this case, the client session will be terminated after 5 minutes of idle time and no keepalive messages will be sent.",
                                "remediation": "Edit the /etc/ssh/sshd_config file to set the parameters as follows: \nClientAliveInterval 300\nClientAliveCountMax 0"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "sudo grep ClientAliveInterval /etc/ssh/sshd_config | grep -v \"^[[:space:]]*#\" | awk '{print $2}'"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the ssh server is setup to terminate idle sessions after 15 minutes",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-1-8-If-a-session-has-been-idle-for-more-than-15-minutes-require-the-user-to-re-authenticate-to-re-activate-the-terminal-or-session-Verify-that-the-ssh-server-will-not-try-to-keep-alive-idle-connections",
                    "name": "Verify that the ssh server will not try to keep alive idle connections",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "0",
                                "check": "equals",
                                "expected": "0",
                                "background": "The two options ClientAliveInterval and ClientAliveCountMax control the timeout of ssh sessions. When the ClientAliveInterval variable is set, ssh sessions that have no activity for the specified length of time are terminated. When the ClientAliveCountMax variable is set, sshd will send client alive messages at every ClientAliveInterval interval. When the number of consecutive client alive messages are sent with no response from the client, the ssh session is terminated. For example, if the ClientAliveInterval is set to 15 seconds and the ClientAliveCountMax is set to 3, the client ssh session will be terminated after 45 seconds of idle time.\n\n\nHaving no timeout value associated with a connection could allow an unauthorized user access to another user's ssh session (e.g. user walks away from their computer and doesn't lock the screen). Setting a timeout value at least reduces the risk of this happening..\nWhile the recommended setting is 300 seconds (5 minutes), set this timeout value based on site policy. The recommended setting for ClientAliveCountMax is 0. In this case, the client session will be terminated after 5 minutes of idle time and no keepalive messages will be sent.",
                                "remediation": "Edit the /etc/ssh/sshd_config file to set the parameters as follows: \nClientAliveInterval 300\nClientAliveCountMax 0"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "sudo grep ClientAliveCountMax /etc/ssh/sshd_config | grep -v \"^[[:space:]]*#\"  | awk '{print $2}'"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the ssh server will not try to keep alive idle connections",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "PCI: Password Check -- 8.2.3 Passwords/passphrases must meet strong requirements": [
                {
                    "id": "PCI-Password-Check-8-2-3-Passwords-passphrases-must-meet-strong-requirementsVerify-that-the-PAM-password-quality-module-is-enabled-on-etc-pam-d-system-auth",
                    "name": "Verify that the PAM password quality module is enabled on /etc/pam.d/system-auth",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "1",
                                "check": "equals",
                                "expected": "1",
                                "background": "The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality .so options.\n try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.\n retry=3 - Allow 3 tries before sending back a failure.\nThe following options are set in the /etc/security/pwquality.conf file:\n minlen=14 - password must be 14 characters or more\n dcredit=-1 - provide at least one digit\n ucredit=-1 - provide at least one uppercase character\n ocredit=-1 - provide at least one special character\n lcredit=-1 - provide at least one lowercase character\nThe settings shown above are one possible policy. Alter these values to conform to your own organization's password policies.\n \nStrong passwords protect systems from being hacked through brute force methods.",
                                "remediation": "Edit the /etc/pam.d/password-auth and /etc/pam.d/system-auth files to include the appropriate options for pam_pwquality.so and to conform to site policy: \n\npassword requisite pam_pwquality.so try_first_pass retry=3\nEdit /etc/security/pwquality.conf to add or update the following settings to conform to site policy: \n\nminlen=14 \ndcredit=-1 \nucredit=-1 \nocredit=-1 \nlcredit=-1"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep pam_pwquality.so /etc/pam.d/system-auth | grep -v \"^[[:space:]]*#\" |  wc -l"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the PAM password quality module is enabled on /etc/pam.d/system-auth",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-2-3-Passwords-passphrases-must-meet-strong-requirementsVerify-that-the-PAM-password-quality-module-is-enabled-on-etc-pam-d-password-auth",
                    "name": "Verify that the PAM password quality module is enabled on /etc/pam.d/password-auth",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "exp": "1",
                                "check": "equals",
                                "expected": "1",
                                "background": "The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality .so options.\n try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.\n retry=3 - Allow 3 tries before sending back a failure.\nThe following options are set in the /etc/security/pwquality.conf file:\n minlen=14 - password must be 14 characters or more\n dcredit=-1 - provide at least one digit\n ucredit=-1 - provide at least one uppercase character\n ocredit=-1 - provide at least one special character\n lcredit=-1 - provide at least one lowercase character\nThe settings shown above are one possible policy. Alter these values to conform to your own organization's password policies.\n \nStrong passwords protect systems from being hacked through brute force methods.",
                                "remediation": "Edit the /etc/pam.d/password-auth and /etc/pam.d/system-auth files to include the appropriate options for pam_pwquality.so and to conform to site policy: \n\npassword requisite pam_pwquality.so try_first_pass retry=3\nEdit /etc/security/pwquality.conf to add or update the following settings to conform to site policy: \n\nminlen=14 \ndcredit=-1 \nucredit=-1 \nocredit=-1 \nlcredit=-1"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep pam_pwquality.so /etc/pam.d/password-auth | grep -v \"^[[:space:]]*#\" | wc -l"
                    },
                    "check_type": "scripts",
                    "description": "Verify that the PAM password quality module is enabled on /etc/pam.d/password-auth",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-2-3-Passwords-passphrases-must-meet-strong-requirementsThe-minimal-password-length-is-14-characters",
                    "name": "The minimal password length is 14 characters",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "14"
                                    }
                                ],
                                "check": "conditional",
                                "background": "The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality .so options.\n try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.\n retry=3 - Allow 3 tries before sending back a failure.\nThe following options are set in the /etc/security/pwquality.conf file:\n minlen=14 - password must be 14 characters or more\n dcredit=-1 - provide at least one digit\n ucredit=-1 - provide at least one uppercase character\n ocredit=-1 - provide at least one special character\n lcredit=-1 - provide at least one lowercase character\nThe settings shown above are one possible policy. Alter these values to conform to your own organization's password policies.\n \nStrong passwords protect systems from being hacked through brute force methods."
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep minlen | tail -1`; y=`expr \"$x\" : '\\(.*[m][i][n][l][e][n] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "The minimal password length is 14 characters",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-2-3-Passwords-passphrases-must-meet-strong-requirementsPasswords-should-have-at-least-1-digit",
                    "name": "Passwords should have at least 1 digit",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": "<=",
                                        "val": "-1"
                                    }
                                ],
                                "check": "conditional",
                                "background": "The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality .so options.\n try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.\n retry=3 - Allow 3 tries before sending back a failure.\nThe following options are set in the /etc/security/pwquality.conf file:\n minlen=14 - password must be 14 characters or more\n dcredit=-1 - provide at least one digit\n ucredit=-1 - provide at least one uppercase character\n ocredit=-1 - provide at least one special character\n lcredit=-1 - provide at least one lowercase character\nThe settings shown above are one possible policy. Alter these values to conform to your own organization's password policies.\n \nStrong passwords protect systems from being hacked through brute force methods."
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep dcredit | tail -1`; y=`expr \"$x\" : '\\(.*[d][c][r][e][d][i][t] *= *[-]*[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([-]*[1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "Passwords should have at least 1 digit",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-2-3-Passwords-passphrases-must-meet-strong-requirementsPasswords-should-have-at-least-one-uppercase-letters",
                    "name": "Passwords should have at least one uppercase letters",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": "<=",
                                        "val": "-1"
                                    }
                                ],
                                "check": "conditional",
                                "background": "The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality .so options.\n try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.\n retry=3 - Allow 3 tries before sending back a failure.\nThe following options are set in the /etc/security/pwquality.conf file:\n minlen=14 - password must be 14 characters or more\n dcredit=-1 - provide at least one digit\n ucredit=-1 - provide at least one uppercase character\n ocredit=-1 - provide at least one special character\n lcredit=-1 - provide at least one lowercase character\nThe settings shown above are one possible policy. Alter these values to conform to your own organization's password policies.\n \nStrong passwords protect systems from being hacked through brute force methods."
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep ucredit | tail -1`; y=`expr \"$x\" : '\\(.*[u][c][r][e][d][i][t] *= *[-]*[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([-]*[1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "Passwords should have at least one uppercase letters",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-2-3-Passwords-passphrases-must-meet-strong-requirementsPasswords-should-have-at-least-1-lowercase-letters",
                    "name": "Passwords should have at least 1 lowercase letters",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": "<=",
                                        "val": "-1"
                                    }
                                ],
                                "check": "conditional",
                                "background": "The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality .so options.\n try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.\n retry=3 - Allow 3 tries before sending back a failure.\nThe following options are set in the /etc/security/pwquality.conf file:\n minlen=14 - password must be 14 characters or more\n dcredit=-1 - provide at least one digit\n ucredit=-1 - provide at least one uppercase character\n ocredit=-1 - provide at least one special character\n lcredit=-1 - provide at least one lowercase character\nThe settings shown above are one possible policy. Alter these values to conform to your own organization's password policies.\n \nStrong passwords protect systems from being hacked through brute force methods."
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep lcredit | tail -1`; y=`expr \"$x\" : '\\(.*[l][c][r][e][d][i][t] *= *[-]*[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([-]*[1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "Passwords should have at least 1 lowercase letters",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-2-3-Passwords-passphrases-must-meet-strong-requirementsEnsure-Password-expiration-is-90-days-or-less",
                    "name": "Ensure Password expiration is 90 days or less",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": "<=",
                                        "val": "90"
                                    }
                                ],
                                "check": "conditional",
                                "background": "The PASS_MAX_DAYS parameter in /etc/login.defs allows an administrator to force passwords to expire once they reach a defined age. It is recommended that the PASS_MAX_DAYS parameter be set to less than or equal to 90 days.",
                                "remediation": "the PASS_MAX_DAYS parameter to 90 in /etc/login.defs :\n284 | P a g e\nPASS_MAX_DAYS 90\nModify user parameters for all users with a password set to match: # chage --maxdays 90 <user>"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/login.defs | grep PASS_MAX_DAYS | awk '{print $2}'"
                    },
                    "check_type": "scripts",
                    "description": "Ensure Password expiration is 90 days or less",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "PCI: Password Check -- 8.2.4 Change user passwords/passphrases at least once every 90 days.": [
                {
                    "id": "PCI-Password-Check-8-2-4-Change-user-passwords-passphrases-at-least-once-every-90-days-All-users-should-change-their-password-every-90-days-by-default",
                    "name": "All users should change their password every 90 days by default",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "90"
                                    }
                                ],
                                "check": "conditional",
                                "background": "The PASS_MAX_DAYS parameter in /etc/login.defs allows an administrator to force passwords to expire once they reach a defined age. It is recommended that the PASS_MAX_DAYS parameter be set to less than or equal to 90 days.\n\nThe window of opportunity for an attacker to leverage compromised credentials or successfully compromise credentials via an online brute force attack is limited by the age of the password. Therefore, reducing the maximum age of a password also reduces an attacker's window of opportunity.",
                                "remediation": "Set the PASS_MAX_DAYS parameter to 90 in /etc/login.defs :\nPASS_MAX_DAYS 90\n\nModify user parameters for all users with a password set to match: # chage --maxdays 90 <user>"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "grep -v \"^[[:space:]]*#\" /etc/login.defs | grep PASS_MAX_DAYS | awk '{print $2}'"
                    },
                    "check_type": "scripts",
                    "description": "All users should change their password every 90 days by default",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "PCI: Password Check -- 8.2.5 Do not allow an individual to submit a new password/passphrase that is the same as any of the last four passwords/passphrases he or she has used.": [
                {
                    "id": "PCI-Password-Check-8-2-5-Do-not-allow-an-individual-to-submit-a-new-password-passphrase-that-is-the-same-as-any-of-the-last-four-passwords-passphrases-he-or-she-has-used-Verify-the-configuration-of-etc-pam-d-password-auth-and-confirm-the-password-remember-parameter",
                    "name": "Verify the configuration of /etc/pam.d/password-auth and confirm the password remember parameter",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "5"
                                    }
                                ],
                                "check": "conditional",
                                "background": "Forcing users not to reuse their past 5 passwords make it less likely that an attacker will be able to guess the password.\nNote that these change only apply to accounts configured on the local system.",
                                "remediation": "Edit the /etc/pam.d/password-auth and /etc/pam.d/system-auth files to include the remember option and conform to site policy as shown: \n\npassword sufficient pam_unix.so remember=5",
                                "valueSelectList": null
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_unix.so | grep use_authtok | grep remember | tail -1`; y=`expr \"$x\" : '\\(.*[r][e][m][e][m][b][e][r] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "Verify the configuration of /etc/pam.d/password-auth and confirm the password remember parameter",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "PCI-Password-Check-8-2-5-Do-not-allow-an-individual-to-submit-a-new-password-passphrase-that-is-the-same-as-any-of-the-last-four-passwords-passphrases-he-or-she-has-used-Verify-the-configuration-of-etc-pam-d-system-auth-and-confirm-the-password-remember-parameter",
                    "name": "Verify the configuration of /etc/pam.d/system-auth and confirm the password remember parameter",
                    "error": false,
                    "checks": {
                        "Raw": [
                            {
                                "cond": [
                                    {
                                        "op": ">=",
                                        "val": "5"
                                    }
                                ],
                                "check": "conditional",
                                "background": "Forcing users not to reuse their past 5 passwords make it less likely that an attacker will be able to guess the password.\nNote that these change only apply to accounts configured on the local system.",
                                "remediation": "Edit the /etc/pam.d/password-auth and /etc/pam.d/system-auth files to include the remember option and conform to site policy as shown: password sufficient pam_unix.so remember=5"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_unix.so | grep use_authtok | grep remember | tail -1`; y=`expr \"$x\" : '\\(.*[r][e][m][e][m][b][e][r] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
                    },
                    "check_type": "scripts",
                    "description": "Verify the configuration of /etc/pam.d/system-auth and confirm the password remember parameter",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "PCI: Password Check -- Policy Version": [
                {
                    "id": "PCI-Password-Check-Policy-VersionPolicy-Version",
                    "name": "Policy Version",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "check": "equals",
                                "expected": "true"
                            }
                        ]
                    },
                    "ci_path": null,
                    "scripts": {
                        "command": "echo \"20171004-1\""
                    },
                    "check_type": "scripts",
                    "description": "Policy Version",
                    "nodeGroupsOpen": true
                }
            ]
        }
    ],
    "scan_options": {
        "scripts": [
            {
                "description": "PCI: Password Check -- 8.1.1 Assign all users a unique ID before allowing them to access system components, Verify that there are not repeated user names",
                "script": "grep -v \"^[[:space:]]*#\" /etc/passwd | cut -d ':' -f1 | sort | uniq -d"
            },
            {
                "description": "PCI: Password Check -- 8.1.1 Assign all users a unique ID before allowing them to access system components, Verify that there are no repeated User IDs",
                "script": "grep -v \"^[[:space:]]*#\" /etc/passwd | cut -d ':' -f3 | sort | uniq -d"
            },
            {
                "description": "PCI: Password Check -- 8.1.1 Assign all users a unique ID before allowing them to access system components, Verify that there are not repeated group names",
                "script": "grep -v \"^[[:space:]]*#\" /etc/group | cut -d ':' -f1 | sort | uniq -d"
            },
            {
                "description": "PCI: Password Check -- 8.1.1 Assign all users a unique ID before allowing them to access system components, Verify that there are no repeated Group IDs",
                "script": "grep -v \"^[[:space:]]*#\" /etc/group | cut -d ':' -f3 | sort | uniq -d"
            },
            {
                "description": "PCI: Password Check -- 8.1.4 Find and remove/disable inactive user accounts within 90 days., Count the number of users that have not logged in for the last 90 days.",
                "script": "echo -n \"root $( grep bash /etc/passwd | cut -d: -f1 ) $( lastlog -t 90 | tail -n +2 | cut -d\" \" -f1 )\" | sed \"s/ /\\n/g\" | sort | uniq -u"
            },
            {
                "description": "PCI: Password Check -- 8.1.6 Limit repeated access attempts by locking out the user ID after not more than six attempts., Verify the configuration of /etc/pam.d/system-auth and confirm the number of failed login attempts allowed",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_faillock.so | grep deny | tail -1`;  y=`expr \"$x\"  : '\\(.*[d][e][n][y] *= *[1-9][0-9]* *\\)'`;  echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- 8.1.6 Limit repeated access attempts by locking out the user ID after not more than six attempts., Verify the configuration of /etc/pam.d/password-auth and confirm the number of failed login attempts allowed",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/password-auth | grep pam_faillock.so | grep deny | tail -1`; y=`expr \"$x\" : '\\(.*[d][e][n][y] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- 8.1.7 Set the lockout duration to a minimum of 30 minutes or until an administrator enables the user ID., Verify the configuration of /etc/pam.d/system-auth and confirm the account lockout time parameter",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_faillock.so | grep unlock_time | tail -1`; y=`expr \"$x\" : '\\(.*[u][n][l][o][c][k][_][t][i][m][e] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- 8.1.7 Set the lockout duration to a minimum of 30 minutes or until an administrator enables the user ID., Verify the configuration of /etc/pam.d/password-auth and confirm the account lockout time parameter",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/password-auth | grep pam_faillock.so | grep unlock_time | tail -1`; y=`expr \"$x\" : '\\(.*[u][n][l][o][c][k][_][t][i][m][e] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- 8.1.8 If a session has been idle for more than 15 minutes, require the user to re-authenticate to re-activate the terminal or session., Verify that the ssh server is setup to terminate idle sessions after 15 minutes",
                "script": "sudo grep ClientAliveInterval /etc/ssh/sshd_config | grep -v \"^[[:space:]]*#\" | awk '{print $2}'"
            },
            {
                "description": "PCI: Password Check -- 8.1.8 If a session has been idle for more than 15 minutes, require the user to re-authenticate to re-activate the terminal or session., Verify that the ssh server will not try to keep alive idle connections",
                "script": "sudo grep ClientAliveCountMax /etc/ssh/sshd_config | grep -v \"^[[:space:]]*#\"  | awk '{print $2}'"
            },
            {
                "description": "PCI: Password Check -- 8.2.3 Passwords/passphrases must meet strong requirements, Verify that the PAM password quality module is enabled on /etc/pam.d/system-auth",
                "script": "grep pam_pwquality.so /etc/pam.d/system-auth | grep -v \"^[[:space:]]*#\" |  wc -l"
            },
            {
                "description": "PCI: Password Check -- 8.2.3 Passwords/passphrases must meet strong requirements, Verify that the PAM password quality module is enabled on /etc/pam.d/password-auth",
                "script": "grep pam_pwquality.so /etc/pam.d/password-auth | grep -v \"^[[:space:]]*#\" | wc -l"
            },
            {
                "description": "PCI: Password Check -- 8.2.3 Passwords/passphrases must meet strong requirements, The minimal password length is 14 characters",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep minlen | tail -1`; y=`expr \"$x\" : '\\(.*[m][i][n][l][e][n] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- 8.2.3 Passwords/passphrases must meet strong requirements, Passwords should have at least 1 digit",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep dcredit | tail -1`; y=`expr \"$x\" : '\\(.*[d][c][r][e][d][i][t] *= *[-]*[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([-]*[1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- 8.2.3 Passwords/passphrases must meet strong requirements, Passwords should have at least one uppercase letters",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep ucredit | tail -1`; y=`expr \"$x\" : '\\(.*[u][c][r][e][d][i][t] *= *[-]*[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([-]*[1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- 8.2.3 Passwords/passphrases must meet strong requirements, Passwords should have at least 1 lowercase letters",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/security/pwquality.conf | grep lcredit | tail -1`; y=`expr \"$x\" : '\\(.*[l][c][r][e][d][i][t] *= *[-]*[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([-]*[1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- 8.2.3 Passwords/passphrases must meet strong requirements, Ensure Password expiration is 90 days or less",
                "script": "grep -v \"^[[:space:]]*#\" /etc/login.defs | grep PASS_MAX_DAYS | awk '{print $2}'"
            },
            {
                "description": "PCI: Password Check -- 8.2.4 Change user passwords/passphrases at least once every 90 days., All users should change their password every 90 days by default",
                "script": "grep -v \"^[[:space:]]*#\" /etc/login.defs | grep PASS_MAX_DAYS | awk '{print $2}'"
            },
            {
                "description": "PCI: Password Check -- 8.2.5 Do not allow an individual to submit a new password/passphrase that is the same as any of the last four passwords/passphrases he or she has used., Verify the configuration of /etc/pam.d/password-auth and confirm the password remember parameter",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_unix.so | grep use_authtok | grep remember | tail -1`; y=`expr \"$x\" : '\\(.*[r][e][m][e][m][b][e][r] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- 8.2.5 Do not allow an individual to submit a new password/passphrase that is the same as any of the last four passwords/passphrases he or she has used., Verify the configuration of /etc/pam.d/system-auth and confirm the password remember parameter",
                "script": "x=`grep -v \"^[[:space:]]*#\" /etc/pam.d/system-auth | grep pam_unix.so | grep use_authtok | grep remember | tail -1`; y=`expr \"$x\" : '\\(.*[r][e][m][e][m][b][e][r] *= *[1-9][0-9]* *\\)'`; echo -n `expr \"$y\" : '.*= *\\([1-9][0-9]*\\)'`;"
            },
            {
                "description": "PCI: Password Check -- Policy Version, Policy Version",
                "script": "echo \"20171004-1\""
            }
        ]
    }
}
