{
    "policy": {
        "name": "pci_32_server_hardening_--_windows",
        "short_description": "PCI 3.2 Server Hardening -- Windows",
        "description": "",
        "settings": {
            "tests": {
                "output_format": null
            }
        },
        "operating_system_family_id": 1,
        "operating_system_id": 125,
        "type": null
    },
    "data": [
        {
            "2.2.2.a Select a sample of system components and inspect enabled system services, daemons, and protocols to verify that only necessary services or protocols are enabled": [
                {
                    "id": "2-2-2-a-Select-a-sample-of-system-components-and-inspect-enabled-system-services-daemons-and-protocols-to-verify-that-only-necessary-services-or-protocols-are-enabled-PCI-Server-Hardening-Make-sure-Fax-Service-is-not-installed",
                    "name": "[PCI: Server-Hardening] Make sure Fax Service is not installed",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "exp": "true",
                                "check": "equals",
                                "expected": "true",
                                "background": "Unnecessary services increase the attack surface of a system. Some of these services may not support required levels of authentication or encryption. Make sure Fax Service is not installed",
                                "remediation": "Remove or disable the Fax (fax) service."
                            }
                        ],
                        "FaxInstalledStatus": [
                            {
                                "exp": "False",
                                "check": "equals",
                                "expected": "False"
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "Make sure Fax Service is disabled"
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$obj = New-Object psobject; IF (gwmi win32_Service | where {$_.Name -match \"fax\"}){  $obj | add-member -Type Noteproperty \"FaxInstalledStatus\" -Value $True; } else {   $obj | add-member -Type Noteproperty \"FaxInstalledStatus\" -Value $False; }  $obj;",
                        "description": "[PCI: Server-Hardening] Make sure Fax Service is not installed"
                    },
                    "description": "[PCI: Server-Hardening] Make sure Fax Service is not installed",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "2-2-2-a-Select-a-sample-of-system-components-and-inspect-enabled-system-services-daemons-and-protocols-to-verify-that-only-necessary-services-or-protocols-are-enabled-PCI-Server-Hardening-Make-sure-FTP-is-not-installed",
                    "name": "[PCI: Server-Hardening] Make sure FTP is not installed",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "check": "equals",
                                "expected": "true",
                                "background": "Unnecessary services increase the attack surface of a system. Some of these services may not support required levels of authentication or encryption. Make sure FTP is not installed",
                                "remediation": "Remove or disable the Microsoft FTP Service (msftpsvc) service."
                            }
                        ],
                        "FTPInstalledStatus": [
                            {
                                "exp": "False",
                                "check": "equals",
                                "expected": "False"
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "Make sure FTP is not installed"
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$obj = New-Object psobject; If (gwmi win32_ServerFeature | where {$_.Name -match \"FTP\"}){  $obj | add-member -Type Noteproperty \"FTPInstalledStatus\" -Value $True; } else {   $obj | add-member -Type Noteproperty \"FTPInstalledStatus\" -Value $False; }  $obj;",
                        "description": "[PCI: Server-Hardening] Make sure FTP is not installed"
                    },
                    "selectList": [
                        "*"
                    ],
                    "description": "[PCI: Server-Hardening] Make sure FTP is not installed",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "2-2-2-a-Select-a-sample-of-system-components-and-inspect-enabled-system-services-daemons-and-protocols-to-verify-that-only-necessary-services-or-protocols-are-enabled-PCI-Server-Hardening-Remove-or-disable-the-Simple-TCP-IP-Services-simptcp-service",
                    "name": "[PCI: Server-Hardening] Remove or disable the Simple TCP/IP Services (simptcp) service",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "exp": "true",
                                "check": "equals",
                                "expected": "true",
                                "background": "Unnecessary services increase the attack surface of a system. Some of these services may not support required levels of authentication or encryption.  The Simple TCP/IP Services service must be disabled if installed.",
                                "remediation": "Remove or disable the Simple TCP/IP Services (simptcp) service."
                            }
                        ],
                        "simptcpInstalledStatus": [
                            {
                                "check": "equals",
                                "expected": "False",
                                "valueSelectList": null,
                                "attributeSelectList": null,
                                "availableAttributes": null
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "Remove or disable the Simple TCP/IP Services (simptcp) service."
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$obj = New-Object psobject; IF (gwmi win32_Service | where {$_.Name -match \"simptcp\"}){  $obj | add-member -Type Noteproperty \"simptcpInstalledStatus\" -Value $True; } else {  $obj | add-member -Type Noteproperty \"simptcpInstalledStatus\" -Value $False; } $obj;",
                        "description": "[PCI: Server-Hardening] Remove or disable the Simple TCP/IP Services (simptcp) service"
                    },
                    "description": "[PCI: Server-Hardening] Remove or disable the Simple TCP/IP Services (simptcp) service",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "2-2-2-a-Select-a-sample-of-system-components-and-inspect-enabled-system-services-daemons-and-protocols-to-verify-that-only-necessary-services-or-protocols-are-enabled-PCI-Server-Hardening-Verify-the-Peer-Network-Identity-Manager-p2pimsvc-service-is-not-installed-or-is-disabled",
                    "name": "[PCI: Server-Hardening] Verify the Peer Network Identity Manager (p2pimsvc) service is not installed or is disabled",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "check": "equals",
                                "expected": "true",
                                "background": "Verify the Peer Network Identity Manager (p2pimsvc) service is not installed or is disabled.",
                                "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Network -> Microsoft Peer-to-Peer Networking Services -> \"Turn off Microsoft Peer-to-Peer Networking Services\" to \"Enabled\"."
                            }
                        ],
                        "p2pimsvcInstalledStatus": [
                            {
                                "exp": "False",
                                "check": "equals",
                                "expected": "False"
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "Verify the Peer Network Identity Manager (p2pimsvc) service is not installed or is disabled."
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$obj = New-Object psobject; IF (gwmi win32_Service | where {$_.Name -match \"p2pimsvc\"}){  $obj | add-member -Type Noteproperty \"p2pimsvcInstalledStatus\" -Value $True; } else {  $obj | add-member -Type Noteproperty \"p2pimsvcInstalledStatus\" -Value $False; } $obj;",
                        "description": "[PCI: Server-Hardening] Verify the Peer Network Identity Manager (p2pimsvc) service is not installed or is disabled"
                    },
                    "description": "[PCI: Server-Hardening] Verify the Peer Network Identity Manager (p2pimsvc) service is not installed or is disabled",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "2-2-2-a-Select-a-sample-of-system-components-and-inspect-enabled-system-services-daemons-and-protocols-to-verify-that-only-necessary-services-or-protocols-are-enabled-PCI-Server-Hardening-Verify-the-Telnet-tlntsvr-service-is-not-installed-or-is-disabled-WN12-SV-000105",
                    "name": "[PCI: Server-Hardening] Verify the Telnet (tlntsvr) service is not installed or is disabled. WN12-SV-000105",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "exp": "true",
                                "check": "equals",
                                "expected": "true",
                                "background": "Unnecessary services increase the attack surface of a system. Some of these services may not support required levels of authentication or encryption. The Telnet service must be disabled if installed.",
                                "remediation": "Remove or disable the Telnet (tlntsvr) service."
                            }
                        ],
                        "tlntsvrInstalledStatus": [
                            {
                                "check": "equals",
                                "expected": "False",
                                "valueSelectList": null,
                                "attributeSelectList": null,
                                "availableAttributes": null
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "Verify the Telnet (tlntsvr) service is not installed or is disabled.  WN12-SV-000105"
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$obj = New-Object psobject;  IF (gwmi win32_Service | where {$_.Name -match \"tlntsvr\"}){  $obj | add-member -Type Noteproperty \"tlntsvrInstalledStatus\" -Value $True; } else {  $obj | add-member -Type Noteproperty \"tlntsvrInstalledStatus\" -Value $False; }  $obj;",
                        "description": "[PCI: Server-Hardening] Verify the Telnet (tlntsvr) service is not installed or is disabled. WN12-SV-000105"
                    },
                    "description": "[PCI: Server-Hardening] Verify the Telnet (tlntsvr) service is not installed or is disabled. WN12-SV-000105",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "2.2.3.a Inspect configuration settings to verify that security features are documented and implemented for all insecure services, daemons, or protocols": [
                {
                    "id": "2-2-3-a-Inspect-configuration-settings-to-verify-that-security-features-are-documented-and-implemented-for-all-insecure-services-daemons-or-protocols-PCI-Server-Hardening-Named-pipes-that-can-be-accessed-anonymously-must-be-configured-with-limited-values-on-domain-controllers-WN12-SO-000055-DC",
                    "name": "[PCI: Server-Hardening] Named pipes that can be accessed anonymously must be configured with limited values on domain controllers. WN12-SO-000055-DC",
                    "error": false,
                    "checks": {
                        "VALUE": [
                            {
                                "exp": "netlogon|samr|lsarpc",
                                "check": "regex",
                                "expected": "netlogon|samr|lsarpc",
                                "background": "Named pipes that can be accessed anonymously must be configured with limited values on domain controllers. Pipes are internal system communications processes. They are identified internally by ID numbers that vary between systems. To make access to these processes easier, these pipes are given names that do not vary between systems. This setting controls which of these pipes anonymous users may access.",
                                "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Network access: Named pipes that can be accessed anonymously\" to only include \"netlogon, samr, lsarpc\"."
                            }
                        ],
                        "present": [
                            {
                                "exp": "true",
                                "check": "equals",
                                "expected": "true",
                                "background": "Named pipes that can be accessed anonymously must be configured with limited values on domain controllers.\nPipes are internal system communications processes. They are identified internally by ID numbers that vary between systems. To make access to these processes easier, these pipes are given names that do not vary between systems. This setting controls which of these pipes anonymous users may access.",
                                "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Network access: Named pipes that can be accessed anonymously\" to only include \"netlogon, samr, lsarpc\"."
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "Named pipes that can be accessed anonymously must be configured with limited values on domain controllers. WN12-SO-000055-DC"
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Services\\LanManServer\\Parameters' ; $value = 'NullSessionPipes'; $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } } $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value ($keyValue -join \",\") ; $obj;",
                        "description": "[PCI: Server-Hardening] Named pipes that can be accessed anonymously must be configured with limited values on domain controllers. WN12-SO-000055-DC"
                    },
                    "description": "[PCI: Server-Hardening] Named pipes that can be accessed anonymously must be configured with limited values on domain controllers. WN12-SO-000055-DC",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "2-2-3-a-Inspect-configuration-settings-to-verify-that-security-features-are-documented-and-implemented-for-all-insecure-services-daemons-or-protocols-PCI-Server-Hardening-FTP-servers-must-be-configured-to-prevent-access-to-the-system-drive-WN12-GE-000027",
                    "name": "[PCI: Server-Hardening] FTP servers must be configured to prevent access to the system drive. WN12-GE-000027",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "exp": "true",
                                "check": "equals",
                                "expected": "true",
                                "background": "The FTP service allows remote users to access shared files and directories which could provide access to system resources and compromise the system, especially if the user can gain access to the root directory of the boot drive.",
                                "remediation": "Configure the system to prevent an FTP service from allowing access to the system drive."
                            }
                        ],
                        "PolicyPass": [
                            {
                                "check": "equals",
                                "expected": "YES",
                                "valueSelectList": null,
                                "attributeSelectList": null,
                                "availableAttributes": null
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "FTP servers must be configured to prevent access to the system drive. WN12-GE-000027"
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$u=\"anonymous\"; $p=\"g@gmail.com\"; function New-TemporaryDirectory { $parent = [System.IO.Path]::GetTempPath(); [string] $name = [System.Guid]::NewGuid(); New-Item -ItemType Directory -Path (Join-Path $parent $name); } $obj = New-Object psobject; If (gwmi win32_ServerFeature | where {$_.Name -match \"FTP\"}){ $ftp=$True; $obj | add-member -Type Noteproperty \"FTP Installed\" -Value \"YES\"; } else { $ftp=$False; $obj | add-member -Type Noteproperty \"FTP Installed\" -Value \"NO\"; $obj | add-member -Type Noteproperty \"FTPSystemAccess\" -Value \"Not Installed\"; $obj | add-member -Type Noteproperty \"PolicyPass\" -Value \"YES\"; } IF ($ftp){ $Cmddir = New-TemporaryDirectory $Cmdtext = \"Open 127.0.0.1`n$u`n$p`ndir`nbye\"; $Cmdtext | Set-Content $Cmddir\\ftpcmd.txt; $ftpoutput= Invoke-Expression \"ftp -i -s:$Cmddir\\ftpcmd.txt\"; If ($ftpoutput| Select-String -pattern \"Not connected|User cannot log in\") { $obj | add-member -Type Noteproperty \"FTPSystemAccess\" -Value \"Login Failed\"; $obj | add-member -Type Noteproperty \"PolicyPass\" -Value \"NO\"; } else { If ($ftpoutput | Select-String -pattern \"Windows|Program Files\") { $obj | add-member -Type Noteproperty \"FTPSystemAccess\" -Value \"YES\"; $obj | add-member -Type Noteproperty \"PolicyPass\" -Value \"NO\"; } else { $obj | add-member -Type Noteproperty \"FTPSystemAccess\" -Value \"NO\"; $obj | add-member -Type Noteproperty \"PolicyPass\" -Value \"YES\"; } Remove-Item $Cmddir\\ftpcmd.txt; } } $obj;",
                        "description": "[PCI: Server-Hardening] FTP servers must be configured to prevent access to the system drive. WN12-GE-000027"
                    },
                    "description": "[PCI: Server-Hardening] FTP servers must be configured to prevent access to the system drive. WN12-GE-000027",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "2.2.4.c Select a sample of system components and inspect the common security parameters to verify that they are set appropriately and in accordance with the configuration standards": [
                {
                    "id": "2-2-4-c-Select-a-sample-of-system-components-and-inspect-the-common-security-parameters-to-verify-that-they-are-set-appropriately-and-in-accordance-with-the-configuration-standards-PCI-Server-Hardening-Reversible-password-encryption-must-be-disabled",
                    "name": "[PCI: Server-Hardening] Reversible password encryption must be disabled",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "exp": "true",
                                "check": "equals",
                                "expected": "true",
                                "background": "Storing passwords using reversible encryption is essentially the same as storing clear-text versions of the passwords. For this reason, this policy must never be enabled.",
                                "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Account Policies -> Password Policy -> \"Store password using reversible encryption\" to \"Disabled\"."
                            }
                        ],
                        "ClearTextPassword": [
                            {
                                "exp": "0",
                                "check": "equals",
                                "expected": "0"
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "Reversible password encryption must be disabled. WN12-AC-000009"
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "function New-TemporaryDirectory { $parent = [System.IO.Path]::GetTempPath(); [string] $name = [System.Guid]::NewGuid(); New-Item -ItemType Directory -Path (Join-Path $parent $name); } $TmpDir = New-TemporaryDirectory; Invoke-Expression \"C:\\windows\\system32\\secedit.exe /export /cfg $TmpDir\\secedit_out.txt /quiet\"; $arr=@((cat $TmpDir\\secedit_out.txt | Select-string \"ClearTextPassword\" ) -split \"=\").trim(); $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"ClearTextPassword\" -Value $arr[1]; $obj; Remove-Item $TmpDir\\secedit_out.txt;",
                        "description": "[PCI: Server-Hardening] Reversible password encryption must be disabled"
                    },
                    "description": "[PCI: Server-Hardening] Reversible password encryption must be disabled",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "2-2-4-c-Select-a-sample-of-system-components-and-inspect-the-common-security-parameters-to-verify-that-they-are-set-appropriately-and-in-accordance-with-the-configuration-standards-PCI-Server-Hardening-Optional-Subsystems-must-not-be-permitted-to-operate-on-the-system-WN12-SO-000088",
                    "name": "[PCI: Server-Hardening] Optional Subsystems must not be permitted to operate on the system. WN12-SO-000088",
                    "error": false,
                    "checks": {
                        "VALUE": [
                            {
                                "check": "equals",
                                "expected": "EMPTY",
                                "background": "",
                                "remediation": "",
                                "valueSelectList": null,
                                "attributeSelectList": null,
                                "availableAttributes": null
                            }
                        ],
                        "present": [
                            {
                                "exp": "true",
                                "check": "equals",
                                "expected": "true",
                                "background": "The POSIX subsystem is an Institute of Electrical and Electronic Engineers (IEEE) standard that defines a set of operating system services. The POSIX Subsystem is required if the server supports applications that use that subsystem. The subsystem introduces a security risk relating to processes that can potentially persist across logins. That is, if a user starts a process and then logs out, there is a potential that the next user who logs in to the system could access the previous users process. This is dangerous because the process started by the first user may retain that users system privileges, and anything the second user does with that process will be performed with the privileges of the first user.",
                                "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"System settings: Optional subsystems\" to \"Blank\" (Configured with no entries)."
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "Optional Subsystems must not be permitted to operate on the system. WN12-SO-000088"
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Subsystems' ; $value = 'Optional';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent;  If ([string]::IsNullOrWhitespace($keyValue)) { $keyValue=\"EMPTY\"};  $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                        "description": "[PCI: Server-Hardening] Optional Subsystems must not be permitted to operate on the system. WN12-SO-000088"
                    },
                    "description": "[PCI: Server-Hardening] Optional Subsystems must not be permitted to operate on the system. WN12-SO-000088",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "2.2.5.a Select a sample of system components and inspect the configurations to verify that all unnecessary functionality (for example, scripts, drivers, features, subsystems, file systems, etc.) is removed": [
                {
                    "id": "2-2-5-a-Select-a-sample-of-system-components-and-inspect-the-configurations-to-verify-that-all-unnecessary-functionality-for-example-scripts-drivers-features-subsystems-file-systems-etc-is-removed-PCI-Server-Hardening-Autoplay-must-be-disabled-for-all-drives-WIN12-CC-000074",
                    "name": "[PCI: Server-Hardening] Autoplay must be disabled for all drives. WIN12-CC-000074",
                    "error": false,
                    "checks": {
                        "VALUE": [
                            {
                                "check": "equals",
                                "expected": "255",
                                "background": "Allowing autoplay to execute may introduce malicious code to a system. Autoplay begins reading from a drive as soon media is inserted into the drive. As a result, the setup file of programs or music on audio media may start. By default, autoplay is disabled on removable drives, such as the floppy disk drive (but not the CD-ROM drive) and on network drives. Enabling this policy disables autoplay on all drives.",
                                "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> AutoPlay Policies -> \"Turn off AutoPlay\" to \"Enabled:All Drives\".",
                                "valueSelectList": null,
                                "attributeSelectList": null,
                                "availableAttributes": null
                            }
                        ],
                        "present": [
                            {
                                "exp": "true",
                                "check": "equals",
                                "expected": "true",
                                "background": "Allowing autoplay to execute may introduce malicious code to a system. Autoplay begins reading from a drive as soon media is inserted into the drive. As a result, the setup file of programs or music on audio media may start. By default, autoplay is disabled on removable drives, such as the floppy disk drive (but not the CD-ROM drive) and on network drives. Enabling this policy disables autoplay on all drives.",
                                "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> AutoPlay Policies -> \"Turn off AutoPlay\" to \"Enabled:All Drives\"."
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "Autoplay must be disabled for all drives. WIN12-CC-000074"
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$key= 'HKLM:\\\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Explorer' ; $value = 'NoDriveTypeAutoRun';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                        "description": "[PCI: Server-Hardening] Autoplay must be disabled for all drives. WIN12-CC-000074"
                    },
                    "description": "[PCI: Server-Hardening] Autoplay must be disabled for all drives. WIN12-CC-000074",
                    "nodeGroupsOpen": true
                },
                {
                    "id": "2-2-5-a-Select-a-sample-of-system-components-and-inspect-the-configurations-to-verify-that-all-unnecessary-functionality-for-example-scripts-drivers-features-subsystems-file-systems-etc-is-removed-PCI-Server-Hardening-The-use-of-biometrics-must-be-disabled-WN12-CC-000075",
                    "name": "[PCI: Server-Hardening] The use of biometrics must be disabled. WN12-CC-000075",
                    "error": false,
                    "checks": {
                        "VALUE": [
                            {
                                "check": "equals",
                                "expected": "n/a",
                                "background": "Allowing biometrics may bypass required authentication methods. Biometrics may only be used as an additional authentication factor where an enhanced strength of identity credential is necessary or desirable. Additional factors must be met per DoD policy.",
                                "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Biometrics -> \"Allow the use of biometrics\" to \"Disabled\".",
                                "valueSelectList": null,
                                "attributeSelectList": null,
                                "availableAttributes": null
                            }
                        ],
                        "present": [
                            {
                                "exp": "true",
                                "check": "equals",
                                "expected": "true",
                                "background": "Allowing biometrics may bypass required authentication methods. Biometrics may only be used as an additional authentication factor where an enhanced strength of identity credential is necessary or desirable. Additional factors must be met per DoD policy.",
                                "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Biometrics -> \"Allow the use of biometrics\" to \"Disabled\"."
                            }
                        ]
                    },
                    "ci_path": [
                        "PowerShell",
                        "Queries",
                        "The use of biometrics must be disabled. WN12-CC-000075"
                    ],
                    "check_type": "powershell",
                    "powershell": {
                        "query": "$key= 'HKLM:\\\\SOFTWARE\\Policies\\Microsoft\\Biometric' ; $value = 'BiometricsStatus';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                        "description": "[PCI: Server-Hardening] The use of biometrics must be disabled. WN12-CC-000075"
                    },
                    "description": "[PCI: Server-Hardening] The use of biometrics must be disabled. WN12-CC-000075",
                    "nodeGroupsOpen": true
                }
            ]
        },
        {
            "Version": [
                {
                    "id": "Version-PCI-Server-Hardening-Policy-Version",
                    "name": "[PCI: Server-Hardening] Policy Version",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "check": "equals",
                                "expected": "true"
                            }
                        ]
                    },
                    "ci_path": null,
                    "check_type": "powershell",
                    "powershell": {
                        "query": "echo \"20171011-0\";",
                        "description": "[PCI: Server-Hardening] Policy Version"
                    },
                    "description": "[PCI: Server-Hardening] Policy Version",
                    "nodeGroupsOpen": true
                }
            ]
        }
    ],
    "scan_options": {
        "powershell_queries": [
            {
                "description": "[PCI: Server-Hardening] Make sure Fax Service is not installed",
                "query": "$obj = New-Object psobject; IF (gwmi win32_Service | where {$_.Name -match \"fax\"}){  $obj | add-member -Type Noteproperty \"FaxInstalledStatus\" -Value $True; } else {   $obj | add-member -Type Noteproperty \"FaxInstalledStatus\" -Value $False; }  $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] Make sure FTP is not installed",
                "query": "$obj = New-Object psobject; If (gwmi win32_ServerFeature | where {$_.Name -match \"FTP\"}){  $obj | add-member -Type Noteproperty \"FTPInstalledStatus\" -Value $True; } else {   $obj | add-member -Type Noteproperty \"FTPInstalledStatus\" -Value $False; }  $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] Remove or disable the Simple TCP/IP Services (simptcp) service",
                "query": "$obj = New-Object psobject; IF (gwmi win32_Service | where {$_.Name -match \"simptcp\"}){  $obj | add-member -Type Noteproperty \"simptcpInstalledStatus\" -Value $True; } else {  $obj | add-member -Type Noteproperty \"simptcpInstalledStatus\" -Value $False; } $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] Verify the Peer Network Identity Manager (p2pimsvc) service is not installed or is disabled",
                "query": "$obj = New-Object psobject; IF (gwmi win32_Service | where {$_.Name -match \"p2pimsvc\"}){  $obj | add-member -Type Noteproperty \"p2pimsvcInstalledStatus\" -Value $True; } else {  $obj | add-member -Type Noteproperty \"p2pimsvcInstalledStatus\" -Value $False; } $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] Verify the Telnet (tlntsvr) service is not installed or is disabled. WN12-SV-000105",
                "query": "$obj = New-Object psobject;  IF (gwmi win32_Service | where {$_.Name -match \"tlntsvr\"}){  $obj | add-member -Type Noteproperty \"tlntsvrInstalledStatus\" -Value $True; } else {  $obj | add-member -Type Noteproperty \"tlntsvrInstalledStatus\" -Value $False; }  $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] Named pipes that can be accessed anonymously must be configured with limited values on domain controllers. WN12-SO-000055-DC",
                "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Services\\LanManServer\\Parameters' ; $value = 'NullSessionPipes'; $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } } $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value ($keyValue -join \",\") ; $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] FTP servers must be configured to prevent access to the system drive. WN12-GE-000027",
                "query": "$u=\"anonymous\"; $p=\"g@gmail.com\"; function New-TemporaryDirectory { $parent = [System.IO.Path]::GetTempPath(); [string] $name = [System.Guid]::NewGuid(); New-Item -ItemType Directory -Path (Join-Path $parent $name); } $obj = New-Object psobject; If (gwmi win32_ServerFeature | where {$_.Name -match \"FTP\"}){ $ftp=$True; $obj | add-member -Type Noteproperty \"FTP Installed\" -Value \"YES\"; } else { $ftp=$False; $obj | add-member -Type Noteproperty \"FTP Installed\" -Value \"NO\"; $obj | add-member -Type Noteproperty \"FTPSystemAccess\" -Value \"Not Installed\"; $obj | add-member -Type Noteproperty \"PolicyPass\" -Value \"YES\"; } IF ($ftp){ $Cmddir = New-TemporaryDirectory $Cmdtext = \"Open 127.0.0.1`n$u`n$p`ndir`nbye\"; $Cmdtext | Set-Content $Cmddir\\ftpcmd.txt; $ftpoutput= Invoke-Expression \"ftp -i -s:$Cmddir\\ftpcmd.txt\"; If ($ftpoutput| Select-String -pattern \"Not connected|User cannot log in\") { $obj | add-member -Type Noteproperty \"FTPSystemAccess\" -Value \"Login Failed\"; $obj | add-member -Type Noteproperty \"PolicyPass\" -Value \"NO\"; } else { If ($ftpoutput | Select-String -pattern \"Windows|Program Files\") { $obj | add-member -Type Noteproperty \"FTPSystemAccess\" -Value \"YES\"; $obj | add-member -Type Noteproperty \"PolicyPass\" -Value \"NO\"; } else { $obj | add-member -Type Noteproperty \"FTPSystemAccess\" -Value \"NO\"; $obj | add-member -Type Noteproperty \"PolicyPass\" -Value \"YES\"; } Remove-Item $Cmddir\\ftpcmd.txt; } } $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] Reversible password encryption must be disabled",
                "query": "function New-TemporaryDirectory { $parent = [System.IO.Path]::GetTempPath(); [string] $name = [System.Guid]::NewGuid(); New-Item -ItemType Directory -Path (Join-Path $parent $name); } $TmpDir = New-TemporaryDirectory; Invoke-Expression \"C:\\windows\\system32\\secedit.exe /export /cfg $TmpDir\\secedit_out.txt /quiet\"; $arr=@((cat $TmpDir\\secedit_out.txt | Select-string \"ClearTextPassword\" ) -split \"=\").trim(); $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"ClearTextPassword\" -Value $arr[1]; $obj; Remove-Item $TmpDir\\secedit_out.txt;"
            },
            {
                "description": "[PCI: Server-Hardening] Optional Subsystems must not be permitted to operate on the system. WN12-SO-000088",
                "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Subsystems' ; $value = 'Optional';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent;  If ([string]::IsNullOrWhitespace($keyValue)) { $keyValue=\"EMPTY\"};  $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] Autoplay must be disabled for all drives. WIN12-CC-000074",
                "query": "$key= 'HKLM:\\\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\Explorer' ; $value = 'NoDriveTypeAutoRun';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] The use of biometrics must be disabled. WN12-CC-000075",
                "query": "$key= 'HKLM:\\\\SOFTWARE\\Policies\\Microsoft\\Biometric' ; $value = 'BiometricsStatus';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[PCI: Server-Hardening] Policy Version",
                "query": "echo \"20171011-0\";"
            }
        ]
    }
}