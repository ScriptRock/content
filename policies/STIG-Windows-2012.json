{
    "policy": {
        "name": "microsoft_windows_server_2012_security_technical_implementation_guide_stig",
        "short_description": "Microsoft Windows Server 2012 Security Technical Implementation Guide (STIG)",
        "description": null,
        "settings": {
            "tests": {
                "output_format": null
            }
        },
        "operating_system_family_id": null,
        "operating_system_id": null,
        "type": null
    },
    "data": [
        {
            "STIG Specific Tests": [
                {
                    "Registry Tests::Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000009-Audit-policy-using-subcategories-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-SO-000009 - Audit policy using subcategories must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. This setting allows administrators to enable more precise auditing capabilities.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Audit: Force audit policy subcategory settings (Windows Vista or later) to override audit policy category settings\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Lsa' ; $value = 'SCENoApplyLegacyAuditPolicy';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Lsa' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $KeyValue; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000009 - Audit policy using subcategories must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000009 - Audit policy using subcategories must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000007-Audit-the-access-of-global-system-objects-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-SO-000007 - Audit the access of global system objects must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. This setting prevents the system from setting up a default system access control list for certain system objects, which could create a very large number of security events, filling the security log in Windows and making it difficult to identify actual issues.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Audit: Audit the access of global system objects\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Lsa' ; $value = 'AuditBaseObjects';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Lsa' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $KeyValue; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000007 - Audit the access of global system objects must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000007 - Audit the access of global system objects must be disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000055-DC-Network-access-Named-pipes-that-can-be-accessed-anonymously-must-be-set-to-netlogon-samr-lsarpc-",
                            "name": "[STIG: Registry Test] WN12-SO-000055-DC - Network access: Named pipes that can be accessed anonymously  must be set to \"netlogon, samr, lsarpc\"",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "includes",
                                        "expected": "netlogon\",\" samr\",\" lsarpc",
                                        "background": "Named pipes that can be accessed anonymously provide the potential for gaining unauthorized system access. Pipes are internal system communications processes. They are identified internally by ID numbers that vary between systems. To make access to these processes easier, these pipes are given names that do not vary between systems. This setting controls which of these pipes anonymous users may access.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Network access: Named pipes that can be accessed anonymously\" to only include \"netlogon, samr, lsarpc\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Services\\LanManServer\\Parameters' ; $value = 'NullSessionPipes';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Services\\LanManServer\\Parameters' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value ($keyValue -Join \",\"); $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000055-DC - Network access: Named pipes that can be accessed anonymously  must be set to \"netlogon, samr, lsarpc\""
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000055-DC - Network access: Named pipes that can be accessed anonymously  must be set to \"netlogon, samr, lsarpc\"",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000090-Domain-controller-LDAP-server-signing-requirements-must-be-set-to-Require-signing",
                            "name": "[STIG: Registry Test] WN12-SO-000090 - Domain controller: LDAP server signing requirements must be set to Require signing",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "2",
                                        "background": "Unsigned network traffic is susceptible to man in the middle attacks where an intruder captures packets between the server and the client and modifies them before forwarding them to the client. In the case of an LDAP server, this means that an attacker could cause a client to make decisions based on false records from the LDAP directory. You can lower the risk of an attacker pulling this off in a corporate network by implementing strong physical security measures to protect the network infrastructure. Furthermore, implementing Internet Protocol security (IPSec) authentication header mode (AH), which performs mutual authentication and packet integrity for Internet Protocol (IP) traffic, can make all types of man in the middle attacks extremely difficult.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Domain controller: LDAP server signing requirements\" to \"Require signing\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\NTDS\\Parameters' ; $value = 'LDAPServerIntegrity';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000090 - Domain controller: LDAP server signing requirements must be set to Require signing"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000090 - Domain controller: LDAP server signing requirements must be set to Require signing",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000008-Audit-Audit-the-use-of-Backup-and-Restore-privilege-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-SO-000008 - Audit: Audit the use of Backup and Restore privilege must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. This setting prevents the system from generating audit events for every file backed up or restored, which could fill the security log in Windows, making it difficult to identify actual issues.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Audit: Audit the use of Backup and Restore privilege\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'FullPrivilegeAuditing';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000008 - Audit: Audit the use of Backup and Restore privilege must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000008 - Audit: Audit the use of Backup and Restore privilege must be disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000048-MSS-TcpMaxDataRetransmissions-How-many-times-unacknowledged-data-is-retransmitted-must-be-set-to-3-or-less",
                            "name": "[STIG: Registry Test] WN12-SO-000048 - MSS: (TcpMaxDataRetransmissions) How many times unacknowledged data is retransmitted must be set to 3 or less",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "exp": "3 (or less)",
                                        "cond": [
                                            {
                                                "op": "<=",
                                                "val": "3"
                                            }
                                        ],
                                        "check": "conditional",
                                        "expected": "3 (or less)",
                                        "background": "In a SYN flood attack, the attacker sends a continuous stream of SYN packets to a server, and the server leaves the half-open connections open until it is overwhelmed and is no longer able to respond to legitimate requests.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"MSS: (TcpMaxDataRetransmissions) How many times unacknowledged data is retransmitted (3 recommended, 5 is the default)\" to \"3\" or less."
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' ; $value = 'TcpMaxDataRetransmissions';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\";} }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000048 - MSS: (TcpMaxDataRetransmissions) How many times unacknowledged data is retransmitted must be set to 3 or less"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000048 - MSS: (TcpMaxDataRetransmissions) How many times unacknowledged data is retransmitted must be set to 3 or less",
                            "nodeGroupsOpen": true,
                            "removeConfirmation": false
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000046-MSS-ScreenSaverGracePeriod-The-time-in-seconds-before-the-screen-saver-grace-period-expires-0-recommended-to-5-",
                            "name": "[STIG: Registry Test] WN12-SO-000046 - MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) to 5.",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "exp": "5 (or less)",
                                        "cond": [
                                            {
                                                "op": "<=",
                                                "val": "5"
                                            }
                                        ],
                                        "check": "conditional",
                                        "expected": "5 (or less)",
                                        "background": "Allowing more than several seconds makes the computer vulnerable to a potential attack from someone walking up to the console to attempt to log on to the system before the lock takes effect.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended)\" to \"5\" or less."
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' ; $value = 'ScreenSaverGracePeriod';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\";} }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000046 - MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) to 5."
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000046 - MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) to 5.",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000042-MSS-NoDefaultExempt-Configure-IPSec-exemptions-for-various-types-of-network-traffic-must-be-set-to-Only-ISAKMP-is-exempt-recommended-for-Windows-Server-2003-",
                            "name": "[STIG: Registry Test] WN12-SO-000042 - MSS: (NoDefaultExempt) Configure IPSec exemptions for various types of network traffic must be set to Only ISAKMP is exempt (recommended for Windows Server 2003)",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "3",
                                        "background": "IPSec exemption filters allow specific traffic that may be needed by the system for such things as Kerberos authentication. This setting configures Windows for specific IPSec exemptions.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"MSS: (NoDefaultExempt) Configure IPSec exemptions for various types of network traffic\" to \"Only ISAKMP is exempt (recommended for Windows Server 2003)\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\IPSEC' ; $value = 'NoDefaultExempt';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000042 - MSS: (NoDefaultExempt) Configure IPSec exemptions for various types of network traffic must be set to Only ISAKMP is exempt (recommended for Windows Server 2003)"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000042 - MSS: (NoDefaultExempt) Configure IPSec exemptions for various types of network traffic must be set to Only ISAKMP is exempt (recommended for Windows Server 2003)",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000081-User-Account-Control-Only-elevate-executables-that-are-signed-and-validated-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-SO-000081 - User Account Control: Only elevate executables that are signed and validated must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "User Account Control (UAC) is a security mechanism for limiting the elevation of privileges, including administrative accounts, unless authorized. This setting configures whether Windows elevates all applications, or only signed ones.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"User Account Control: Only elevate executables that are signed and validated\" to \"Disabled\".\n\nUAC requirements are NA on Server Core installations.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value = 'ValidateAdminCodeSignatures';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000081 - User Account Control: Only elevate executables that are signed and validated must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000081 - User Account Control: Only elevate executables that are signed and validated must be disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000087-System-settings-Use-Certificate-Rules-on-Windows-Executables-for-Software-Restriction-Policies-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-SO-000087 - System settings: Use Certificate Rules on Windows Executables for Software Restriction Policies must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Software restriction policies help to protect users and computers from executing unauthorized code such as viruses and Trojans horses. This setting must be enabled to enforce certificate rules in software restriction policies.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"System settings: Use Certificate Rules on Windows Executables for Software Restriction Policies\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers' ; $value = 'AuthenticodeEnabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000087 - System settings: Use Certificate Rules on Windows Executables for Software Restriction Policies must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000087 - System settings: Use Certificate Rules on Windows Executables for Software Restriction Policies must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000015-Domain-member-Disable-machine-account-password-changes-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-SO-000015 - Domain member: Disable machine account password changes must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "exp": "0",
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Computer account passwords are changed automatically on a regular basis. Disabling automatic password changes can make the system more vulnerable to malicious access. Frequent password changes can be a significant safeguard for your system. A new password for the computer account will be generated every 30 days.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Domain member: Disable machine account password changes\" to \"Disabled\"."
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters' ; $value = 'DisablePasswordChange';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000015 - Domain member: Disable machine account password changes must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000015 - Domain member: Disable machine account password changes must be disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000013-Domain-member-Digitally-encrypt-secure-channel-data-when-possible-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-SO-000013 - Domain member: Digitally encrypt secure channel data (when possible) must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Requests sent on the secure channel are authenticated, and sensitive information (such as passwords) is encrypted, but not all information is encrypted. If this policy is enabled, outgoing secure channel traffic will be encrypted.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Domain member: Digitally encrypt secure channel data (when possible)\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters' ; $value = 'SealSecureChannel';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000013 - Domain member: Digitally encrypt secure channel data (when possible) must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000013 - Domain member: Digitally encrypt secure channel data (when possible) must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000011-Devices-Allowed-to-format-and-eject-removable-media-must-be-set-to-Administrators",
                            "name": "[STIG:Registry Test] WN12-SO-000011 - Devices: Allowed to format and eject removable media must be set to Administrators",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Removable hard drives, if they are not properly configured, can be formatted and ejected by users who are not members of the Administrators Group. Formatting and ejecting removable NTFS media must only be done by administrators.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Devices: Allowed to format and eject removable media\" to \"Administrators\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' ; $value = 'AllocateDASD';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG:Registry Test] WN12-SO-000011 - Devices: Allowed to format and eject removable media must be set to Administrators"
                            },
                            "description": "[STIG:Registry Test] WN12-SO-000011 - Devices: Allowed to format and eject removable media must be set to Administrators",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000053-Network-access-Do-not-allow-storage-of-passwords-and-credentials-for-network-authentication-must-be-enabled",
                            "name": "[STIG:Registry Test] WN12-SO-000053 - Network access: Do not allow storage of passwords and credentials for network authentication must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "This setting controls the storage of passwords and credentials for network authentication on the local system. Such credentials must not be stored on the local machine, as that may lead to account compromise.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Network access: Do not allow storage of passwords and credentials for network authentication\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'DisableDomainCreds';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG:Registry Test] WN12-SO-000053 - Network access: Do not allow storage of passwords and credentials for network authentication must be enabled"
                            },
                            "description": "[STIG:Registry Test] WN12-SO-000053 - Network access: Do not allow storage of passwords and credentials for network authentication must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000052-Network-access-Do-not-allow-anonymous-enumeration-of-SAM-accounts-and-shares-must-be-enabled",
                            "name": "[STIG:Registry Test] WN12-SO-000052 - Network access: Do not allow anonymous enumeration of SAM accounts and shares must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Allowing anonymous logon users (null session connections) to list all account names and enumerate all shared resources can provide a map of potential points to attack the system.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Network access: Do not allow anonymous enumeration of SAM accounts and shares\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'RestrictAnonymous';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG:Registry Test] WN12-SO-000052 - Network access: Do not allow anonymous enumeration of SAM accounts and shares must be enabled"
                            },
                            "description": "[STIG:Registry Test] WN12-SO-000052 - Network access: Do not allow anonymous enumeration of SAM accounts and shares must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000051-Network-access-Do-not-allow-anonymous-enumeration-of-SAM-accounts-must-be-enabled",
                            "name": "[STIG:Registry Test] WN12-SO-000051 - Network access: Do not allow anonymous enumeration of SAM accounts must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Anonymous enumeration of SAM accounts allows anonymous log on users (null session connections) to list all accounts names, thus providing a list of potential points to attack the system.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Network access: Do not allow anonymous enumeration of SAM accounts\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'RestrictAnonymousSAM';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG:Registry Test] WN12-SO-000051 - Network access: Do not allow anonymous enumeration of SAM accounts must be enabled"
                            },
                            "description": "[STIG:Registry Test] WN12-SO-000051 - Network access: Do not allow anonymous enumeration of SAM accounts must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000054-Network-access-Let-everyone-permissions-apply-to-anonymous-users-must-be-disabled",
                            "name": "[STIG:Registry Test] WN12-SO-000054 - Network access: Let everyone permissions apply to anonymous users must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": {
                                    "check": "equals",
                                    "expected": "0",
                                    "background": "Access by anonymous users must be restricted. If this setting is enabled, then anonymous users have the same rights and permissions as the built-in Everyone group. Anonymous users must not have these permissions or rights.",
                                    "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Network access: Let everyone permissions apply to anonymous users\" to \"Disabled\".",
                                    "valueSelectList": null
                                },
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'EveryoneIncludesAnonymous';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG:Registry Test] WN12-SO-000054 - Network access: Let everyone permissions apply to anonymous users must be disabled"
                            },
                            "description": "[STIG:Registry Test] WN12-SO-000054 - Network access: Let everyone permissions apply to anonymous users must be disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000024-Interactive-Logon-Number-of-previous-logons-to-cache-in-case-domain-controller-is-not-available-",
                            "name": "[STIG: Registry Test] WN12-SO-000024 - Interactive Logon: Number of previous logons to cache (in case domain controller is not available)",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "4",
                                        "background": "The default Windows configuration caches the last logon credentials for users who log on interactively to a system. This feature is provided for system availability reasons, such as the user's machine being disconnected from the network or domain controllers being unavailable. Even though the credential cache is well protected, storing encrypted copies of users' passwords on workstations does not always have the same physical protection required for domain controllers. If a workstation is attacked, an unauthorized individual may isolate the password to a domain user account using a password-cracking program and gain access to the domain.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Interactive Logon: Number of previous logons to cache (in case domain controller is not available)\" to \"4\" logons or less.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' ; $value ='CachedLogonsCount';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000024 - Interactive Logon: Number of previous logons to cache (in case domain controller is not available)"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000024 - Interactive Logon: Number of previous logons to cache (in case domain controller is not available)",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000038-MSS-DisableIPSourceRouting-IP-source-routing-protection-level-protects-against-packet-spoofing-to-Highest-protection-source-routing-is-completely-disabled",
                            "name": "[STIG: Registry Test] WN12-SO-000038 - MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing) to Highest protection, source routing is completely disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "2",
                                        "background": "Configuring the system to disable IP source routing protects against spoofing.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing)\" to \"Highest protection, source routing is completely disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' ;  $value ='DisableIPSourceRouting';    $KeyPresent=Test-Path $key ;    if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; }    else { $KeyPresent=\"YES\";    Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value;    $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\"; } }     $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent;     $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent;     $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000038 - MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing) to Highest protection, source routing is completely disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000038 - MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing) to Highest protection, source routing is completely disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000035-Microsoft-network-server-Server-SPN-target-name-validation-level-to-Off",
                            "name": "[STIG: Registry Test] WN12-SO-000035 - Microsoft network server: Server SPN target name validation level  to Off",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "If a service principle name (SPN) is provided by the client, it is validated against the server's list of SPNs. Implementation may disrupt file and print sharing capabilities.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Microsoft network server: Server SPN target name validation level\" to \"Off\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters' ;  $value ='SmbServerNameHardeningLevel';    $KeyPresent=Test-Path $key ;    if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; }    else { $KeyPresent=\"YES\";    Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value;    $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\"; } }     $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent;     $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent;     $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000035 - Microsoft network server: Server SPN target name validation level  to Off"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000035 - Microsoft network server: Server SPN target name validation level  to Off",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000033-Microsoft-network-server-Digitally-sign-communications-if-client-agrees-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-SO-000033 - Microsoft network server: Digitally sign communications (if client agrees) must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "The server message block (SMB) protocol provides the basis for many network operations. Digitally signed SMB packets aid in preventing man-in-the-middle attacks. If this policy is enabled, the SMB server will negotiate SMB packet signing as requested by the client.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Microsoft network server: Digitally sign communications (if client agrees)\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters' ; $value ='EnableSecuritySignature';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000033 - Microsoft network server: Digitally sign communications (if client agrees) must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000033 - Microsoft network server: Digitally sign communications (if client agrees) must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000032-Microsoft-network-server-Digitally-sign-communications-always-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-SO-000032 - Microsoft network server: Digitally sign communications (always) must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "The server message block (SMB) protocol provides the basis for many network operations. Digitally signed SMB packets aid in preventing man-in-the-middle attacks. If this policy is enabled, the SMB server will only communicate with an SMB client that performs SMB packet signing.",
                                        "remediation": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters' ; $value ='RequireSecuritySignature';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters' ; $value ='RequireSecuritySignature';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000032 - Microsoft network server: Digitally sign communications (always) must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000032 - Microsoft network server: Digitally sign communications (always) must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000071-Recovery-console-Allow-automatic-administrative-logon-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-SO-000071 - Recovery console: Allow automatic administrative logon must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "If this option is enabled, the Recovery Console does not require a password and automatically logs on to the system. This could allow unauthorized administrative access to the system.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Recovery console: Allow automatic administrative logon\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Setup\\RecoveryConsole' ; $value ='SecurityLevel';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000071 - Recovery console: Allow automatic administrative logon must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000071 - Recovery console: Allow automatic administrative logon must be disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000072-Recovery-console-Allow-floppy-copy-and-access-to-all-drives-and-folders-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-SO-000072 - Recovery console: Allow floppy copy and access to all drives and folders must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "The Recovery Console SET command allows environment variables to be set in the Recovery Console. This permits access to all drives and folders and the copying of files to removable media, which could expose sensitive information.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"Recovery console: Allow floppy copy and access to all drives and folders\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Setup\\RecoveryConsole' ; $value ='SetCommand';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000072 - Recovery console: Allow floppy copy and access to all drives and folders must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000072 - Recovery console: Allow floppy copy and access to all drives and folders must be disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000074-System-cryptography-Use-FIPS-compliant-algorithms-for-encryption-hashing-and-signing-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-SO-000074 - System cryptography: Use FIPS compliant algorithms for encryption, hashing, and signing must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "This setting ensures that the system uses algorithms that are FIPS-compliant for encryption, hashing, and signing. FIPS-compliant algorithms meet specific standards established by the U.S. Government and must be the algorithms used for all OS encryption functions.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"System cryptography: Use FIPS compliant algorithms for encryption, hashing, and signing\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa\\FIPSAlgorithmPolicy' ; $value ='Enabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000074 - System cryptography: Use FIPS compliant algorithms for encryption, hashing, and signing must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000074 - System cryptography: Use FIPS compliant algorithms for encryption, hashing, and signing must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Local-Policies-Security-Options-STIG-Registry-Test-WN12-SO-000078-User-Account-Control-Behavior-of-the-elevation-prompt-for-administrators-in-Admin-Approval-Mode-to-Prompt-for-consent",
                            "name": "[STIG: Registry Test] WN12-SO-000078 - User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode to Prompt for consent",
                            "error": false,
                            "checks": {
                                "VALUE": {
                                    "check": "equals",
                                    "expected": "4",
                                    "background": "User Account Control (UAC) is a security mechanism for limiting the elevation of privileges, including administrative accounts, unless authorized. This setting configures the elevation requirements for logged on administrators to complete a task that requires raised privileges.",
                                    "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Local Policies -> Security Options -> \"User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode\" to \"Prompt for consent\".\n\nMore secure options for this setting would also be acceptable (e.g., Prompt for credentials, Prompt for consent (or credentials) on the secure desktop).\n\nUAC requirements are NA on Server Core installations.",
                                    "valueSelectList": null
                                },
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value ='ConsentPromptBehaviorAdmin';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000078 - User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode to Prompt for consent"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000078 - User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode to Prompt for consent",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System -> Logon": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Logon-STIG-Registry-Test-WN12-CC-000049-Always-use-classic-logon-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000049 - Always use classic logon must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "The classic logon screen requires users to enter a logon name and password to access a system. The simple logon screen or Welcome screen displays usernames for selection, providing part of the necessary logon information.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Logon -> \"Always use classic logon\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value = 'LogonType';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000049 - Always use classic logon must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000049 - Always use classic logon must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System -> Internet Communication Management -> Internet Communication settings": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Internet-Communication-Management-Internet-Communication-settings-STIG-Registry-Test-WN12-CC-000044-Turn-off-the-Windows-Messenger-Customer-Experience-Improvement-Program-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000044 - Turn off the Windows Messenger Customer Experience Improvement Program must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "2",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting prevents Windows Messenger from collecting anonymous information about how the Windows Messenger software and service is used.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Internet Communication Management -> Internet Communication settings -> \"Turn off the Windows Messenger Customer Experience Improvement Program\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Messenger\\Client' ; $value = 'CEIP';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000044 - Turn off the Windows Messenger Customer Experience Improvement Program must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000044 - Turn off the Windows Messenger Customer Experience Improvement Program must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Internet-Communication-Management-Internet-Communication-settings-STIG-Registry-Test-WN12-CC-000047-Turn-off-Windows-Update-device-driver-searching-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000047 - Turn off Windows Update device driver searching must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting prevents Windows from searching Windows Update for device drivers when no local drivers for a device are present.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Internet Communication Management -> Internet Communication settings -> \"Turn off Windows Update device driver searching\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value = 'DontSearchWindowsUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000047 - Turn off Windows Update device driver searching must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000047 - Turn off Windows Update device driver searching must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Internet-Communication-Management-Internet-Communication-settings-STIG-Registry-Test-WN12-CC-000031-Turn-off-Automatic-Root-Certificates-Update-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000031 -Turn off Automatic Root Certificates Update must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Root Certificate updates must be controlled in the enterprise to ensure a proper validation chain is maintained. This setting prevents root certificates from being updated automatically from the Microsoft site.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Internet Communication Management -> Internet Communication settings -> \"Turn off Automatic Root Certificates Update\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\SystemCertificates\\AuthRoot' ; $value ='DisableRootAutoUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000031 - Turn off Automatic Root Certificates Update must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000031 - Turn off Automatic Root Certificates Update must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Internet-Communication-Management-Internet-Communication-settings-STIG-Registry-Test-WN12-CC-000030-Turn-off-access-to-the-Store-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000030 - Turn off access to the Store must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Uncontrolled installation of applications can introduce various issues, including system instability, and allow access to sensitive information. Installation of applications must be controlled by the enterprise. Turning off access to the Windows Store will limit access to publicly available applications.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Internet Communication Management -> Internet Communication settings -> \"Turn off access to the Store\" to \"Enabled\".\n\nThe Windows Store is not installed by default. If the \\Windows\\WindowsStore directory does not exist, this is NA.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Explorer' ; $value ='NoUseStoreOpenWith';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000030 - Turn off access to the Store must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000030 - Turn off access to the Store must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Internet-Communication-Management-Internet-Communication-settings-STIG-Registry-Test-WN12-CC-000033-Turn-off-Event-Viewer-Events-asp-links-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000033 - Turn off Event Viewer \"Events.asp\" links must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Viewing events is a function of administrators, who must not access the Internet with privileged accounts. This setting will disable Events.asp hyperlinks in Event Viewer to prevent links to the Internet from within events.",
                                        "remediation": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\EventViewer' ; $value ='MicrosoftEventVwrDisableLinks';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\EventViewer' ; $value ='MicrosoftEventVwrDisableLinks';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000033 - Turn off Event Viewer \"Events.asp\" links must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000033 - Turn off Event Viewer \"Events.asp\" links must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Internet-Communication-Management-Internet-Communication-settings-STIG-Registry-Test-WN12-CC-000038-Turn-off-Internet-File-Association-service-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000038 - Turn off Internet File Association service must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting prevents unhandled file associations from using the Microsoft Web service to find an application.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Internet Communication Management -> Internet Communication settings -> \"Turn off Internet File Association service\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer' ; $value ='NoInternetOpenWith';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000038 - Turn off Internet File Association service must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000038 - Turn off Internet File Association service must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System -> Windows Time Service -> Time Providers": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Windows-Time-Service-Time-Providers-STIG-Registry-Test-WN12-AD-000008-DC-The-time-synchronization-tool-must-be-configured-to-enable-logging-of-time-source-switching",
                            "name": "[STIG: Registry Test] WN12-AD-000008-DC - The time synchronization tool must be configured to enable logging of time source switching",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "exp": "2",
                                        "check": "equals",
                                        "expected": "2",
                                        "background": "When a time synchronization tool executes, it may switch between time sources according to network or server contention. If switches between time sources are not logged, it may be difficult or impossible to detect malicious activity or availability problems.",
                                        "remediation": "If the Windows Time Service is used, configured it as follows.\nRegistry Hive: HKEY_LOCAL_MACHINE\nRegistry Path: \\System\\CurrentControlSet\\Services\\W32Time\\Config\\\nValue Name: EventLogFlags\nType: REG_DWORD\nValue: 2\nIf another time synchronization tool used, configure it to log time source switching."
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\W32Time\\Config' ; $value = 'EventLogFlags';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-AD-000008-DC - The time synchronization tool must be configured to enable logging of time source switching"
                            },
                            "description": "[STIG: Registry Test] WN12-AD-000008-DC - The time synchronization tool must be configured to enable logging of time source switching",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Windows-Time-Service-Time-Providers-STIG-Registry-Test-WN12-CC-000069-Configure-Windows-NTP-Client-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000069 - Configure Windows NTP Client  must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "exp": "NoSync|NTP|NT5DS|AllSync",
                                        "check": "regex",
                                        "expected": "NoSync|NTP|NT5DS|AllSync",
                                        "background": "The Windows Time Service controls time synchronization settings. Time synchronization is essential for authentication and auditing purposes. If the Windows Time Service is used, it must synchronize with a secure, authorized time source. Domain-joined systems are automatically configured to synchronize with domain controllers. If an NTP server is configured, it must synchronize with a secure, authorized time source.",
                                        "remediation": "Computer Configuration -> Administrative Templates -> System -> Windows Time Service -> Time Providers -> \"Configure Windows NTP Client\" to \"Enabled\"."
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\W32time\\Parameters' ; $value = 'Type';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000069 - Configure Windows NTP Client  must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000069 - Configure Windows NTP Client  must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Windows-Time-Service-Time-Providers-STIG-Registry-Test-WN12-AD-000007-DC-chk1-Time-synchronization-must-be-enabled-on-the-domain-controller",
                            "name": "[STIG: Registry Test] WN12-AD-000007-DC-chk1:Time synchronization must be enabled on the domain controller",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "When a directory service using multi-master replication (such as AD) executes on computers that do not have synchronized time, directory data may be corrupted or updated invalidly. The lack of synchronized time could lead to audit log data that is misleading, inconclusive, or unusable. In cases of intrusion this may invalidate the audit data as a source of forensic evidence in an incident investigation. In AD, the lack of synchronized time could prevent clients from logging on or accessing server resources as a result of Kerberos requirements related to time variance.",
                                        "remediation": "Ensure the Windows Time Service is configured as follows or install and enable another time synchronization tool.\n\nRegistry Hive: HKEY_LOCAL_MACHINE\n\nRegistry Path: \\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpClient\\\nValue Name: Enabled\nType: REG_DWORD\nValue: 1",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpClient' ; $value ='Enabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ;$obj",
                                "description": "[STIG: Registry Test] WN12-AD-000007-DC-chk1:Time synchronization must be enabled on the domain controller"
                            },
                            "description": "[STIG: Registry Test] WN12-AD-000007-DC-chk1:Time synchronization must be enabled on the domain controller",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Windows-Time-Service-Time-Providers-STIG-Registry-Test-WN12-AD-000007-DC-chk2-Time-synchronization-must-be-enabled-on-the-domain-controller",
                            "name": "[STIG: Registry Test] WN12-AD-000007-DC-chk2:Time synchronization must be enabled on the domain controller",
                            "error": false,
                            "checks": {
                                "VALUE": {
                                    "check": "regex",
                                    "expected": "NT5DS|NTP|Allsync",
                                    "background": "When a directory service using multi-master replication (such as AD) executes on computers that do not have synchronized time, directory data may be corrupted or updated invalidly. The lack of synchronized time could lead to audit log data that is misleading, inconclusive, or unusable. In cases of intrusion this may invalidate the audit data as a source of forensic evidence in an incident investigation. In AD, the lack of synchronized time could prevent clients from logging on or accessing server resources as a result of Kerberos requirements related to time variance.",
                                    "remediation": "Ensure the Windows Time Service is configured as follows or install and enable another time synchronization tool. Registry Hive: HKEY_LOCAL_MACHINE Registry Path: \\System\\CurrentControlSet\\Services\\W32Time\\ Parameters\\ Value Name: Type Type: REG_SZ Value: NT5DS (preferred), NTP or Allsync",
                                    "valueSelectList": null
                                },
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\W32Time\\Parameters' ; $value ='Type';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }   $obj1 = New-Object psobject;  $obj1 | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj1 | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj1 | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj1;",
                                "description": "[STIG: Registry Test] WN12-AD-000007-DC-chk2:Time synchronization must be enabled on the domain controller"
                            },
                            "description": "[STIG: Registry Test] WN12-AD-000007-DC-chk2:Time synchronization must be enabled on the domain controller",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Windows-Time-Service-Time-Providers-STIG-Registry-Test-WN12-CC-000069-Configure-Windows-NTP-Server-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000069 - Configure Windows NTP Server must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "exp": "time.windows.com",
                                        "check": "equals",
                                        "expected": "time.windows.com",
                                        "background": "The Windows Time Service controls time synchronization settings. Time synchronization is essential for authentication and auditing purposes. If the Windows Time Service is used, it must synchronize with a secure, authorized time source. Domain-joined systems are automatically configured to synchronize with domain controllers. If an NTP server is configured, it must synchronize with a secure, authorized time source.",
                                        "remediation": "Computer Configuration -> Administrative Templates -> System -> Windows Time Service -> Time Providers ->Configure the \"NtpServer\" field to point to an authorized time server."
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\W32time\\Parameters' ; $value ='NTPServer';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000069 - Configure Windows NTP Server must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000069 - Configure Windows NTP Server must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "AuditPol Tests::Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> DS Access": [
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-DS-Access-STIG-AuditPol-Test-WN12-AU-000031-32-Ensure-Audit-Directory-Service-Access-is-set-to-Success-and-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-000031/32 - Ensure 'Audit Directory Service Access' is set to 'Success and Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Directory Service Access": [
                                    {
                                        "check": "equals",
                                        "expected": "Success and Failure",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detecting attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. Audit directory service access records events related to users accessing an Active Directory object.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> DS Access -> \"Directory Service Access\" with \"Success\" and \"Failure\" selected.",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"Directory Service Access\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000031/32 - Ensure 'Audit Directory Service Access' is set to 'Success and Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000031/32 - Ensure 'Audit Directory Service Access' is set to 'Success and Failure'",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-DS-Access-STIG-AuditPol-Test-WN12-AU-000035-36-Ensure-Audit-Directory-Service-Changes-is-set-to-Success-and-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-000035/36 - Ensure 'Audit Directory Service Changes' is set to 'Success and Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Directory Service Changes": [
                                    {
                                        "check": "equals",
                                        "expected": "Success and Failure",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detecting attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. Audit directory service changes records events related to changes made to objects in Active Directory Domain Services.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> DS Access -> \"Directory Service Changes\" with \"Success\"  and \"Failure\" selected.",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"Directory Service Changes\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000035/36 - Ensure 'Audit Directory Service Changes' is set to 'Success and Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000035/36 - Ensure 'Audit Directory Service Changes' is set to 'Success and Failure'",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "AuditPol Tests:Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Global Object Access Auditing": [
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-Global-Object-Access-Auditing-STIG-AuditPol-Test-WN12-AU-000116-Global-object-access-auditing-of-the-registry-must-be-configured-to-record-failures",
                            "name": "[STIG: AuditPol Test] WN12-AU-000116 - Global object access auditing of the registry must be configured to record failures",
                            "error": false,
                            "checks": {
                                "User": [
                                    {
                                        "check": "includes",
                                        "expected": "Everyone",
                                        "valueSelectList": null
                                    }
                                ],
                                "Entry": [
                                    {
                                        "check": "includes",
                                        "expected": "1",
                                        "background": "Improper modification of the registry can have a significant impact on the security configuration of a system, as well as potentially rendering a system inoperable. Failed access attempts may indicate an attack on a system. Auditing for failed access attempts provides an indicator of such attempts and a method of determining responsible parties.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Global Object Access Auditing -> \"Registry\" with the following:\n\nPrincipal: Everyone\nType: Fail\nPermissions: all categories selected",
                                        "valueSelectList": null
                                    }
                                ],
                                "Flags": [
                                    {
                                        "check": "includes",
                                        "expected": "Failure",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Accesses": [
                                    {
                                        "check": "includes",
                                        "expected": "KEY_ALL_ACCESS",
                                        "valueSelectList": null
                                    }
                                ],
                                "Resource Type": [
                                    {
                                        "check": "includes",
                                        "expected": "Key",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicyOutput= (Invoke-Expression \"Auditpol /resourceSACL /type:Key /view \") ;  $obj=new-object psobject;    $AccessesVal= ($APolicyOutput | ? {$_} | ? {$_} | Select-String -notmatch \"successfully\" ) | Select -skip 6 ;    $Output=($APolicyOutput | ? {$_} | ? {$_} | Select-String -notmatch \"successfully\" );     If($Output -match \":\") { $Output= $Output -Split (\":\");      $obj | add-member -type noteproperty -name \"Entry\" -value $Output[1];       $obj | add-member -type noteproperty -name \"Resource Type\" -value $Output[3];       $obj | add-member -type noteproperty -name \"User\" -value $Output[5];      $obj | add-member -type noteproperty -name \"Flags\" -value $Output[7];      $obj | add-member -type noteproperty -name \"Condition\" -value $Output[9];      $obj | add-member -type noteproperty -name \"Accesses\" -value ($AccessesVal -join \",\").Trim()      }       else       {            $obj | add-member -type noteproperty -name \"Entry\" -value \"\";      $obj | add-member -type noteproperty -name \"Resource Type\" -value \"\";      $obj | add-member -type noteproperty -name \"User\" -value \"\";      $obj | add-member -type noteproperty -name \"Flags\" -value \"\";      $obj | add-member -type noteproperty -name \"Condition\" -value \"\";      $obj | add-member -type noteproperty -name \"Accesses\" -value \"\";      };                   $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000116 - Global object access auditing of the registry must be configured to record failures"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000116 - Global object access auditing of the registry must be configured to record failures",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-Global-Object-Access-Auditing-STIG-AuditPol-Test-WN12-AU-000114-Global-object-access-auditing-of-the-file-system-must-be-configured-to-record-failures",
                            "name": "[STIG: AuditPol Test] WN12-AU-000114 - Global object access auditing of the file system must be configured to record failures",
                            "error": false,
                            "checks": {
                                "User": [
                                    {
                                        "check": "includes",
                                        "expected": "Everyone",
                                        "valueSelectList": null
                                    }
                                ],
                                "Entry": [
                                    {
                                        "check": "includes",
                                        "expected": "1",
                                        "background": "Improper modification of system files can have a significant impact on the security configuration of a system, as well as potentially rendering a system inoperable. Failed access attempts may indicate an attack on a system. Auditing for failed access attempts provides an indicator of such attempts and a method of determining responsible parties.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Global Object Access Auditing -> \"File system\" with the following:\n\nPrincipal: Everyone\nType: Fail\nPermissions: all categories selected\n\nIf this is configured on a domain controller, in local or group policy, do not set any conditions limiting the scope.",
                                        "valueSelectList": null
                                    }
                                ],
                                "Flags": [
                                    {
                                        "check": "includes",
                                        "expected": "Failure",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Accesses": [
                                    {
                                        "exp": "FILE_READ_DATA,FILE_WRITE_DATA,FILE_APPEND_DATA,FILE_READ_EA,FILE_WRITE_EA,FILE_EXECUTE,FILE_DELETE_CHILD,FILE_READ_ATTRIBUTES,FILE_WRITE_ATTRIBUTES,DELETE,READ_CONTROL,WRITE_DAC,WRITE_OWNER",
                                        "check": "includes",
                                        "expected": "FILE_READ_DATA,FILE_WRITE_DATA,FILE_APPEND_DATA,FILE_READ_EA,FILE_WRITE_EA,FILE_EXECUTE,FILE_DELETE_CHILD,FILE_READ_ATTRIBUTES,FILE_WRITE_ATTRIBUTES,DELETE,READ_CONTROL,WRITE_DAC,WRITE_OWNER",
                                        "background": "Improper modification of system files can have a significant impact on the security configuration of a system, as well as potentially rendering a system inoperable. Failed access attempts may indicate an attack on a system. Auditing for failed access attempts provides an indicator of such attempts and a method of determining responsible parties.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Global Object Access Auditing -> \"File system\" with the following:\n\nPrincipal: Everyone\nType: Fail\nPermissions: all categories selected"
                                    }
                                ],
                                "Resource Type": [
                                    {
                                        "check": "includes",
                                        "expected": "File",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicyOutput= (Invoke-Expression \"Auditpol /resourceSACL /type:File /view \");   $obj=new-object psobject;      $AccessesVal= ($APolicyOutput | ? {$_} | ? {$_} | Select-String -notmatch \"successfully\" )  | Select -skip 6 ;        $Output=($APolicyOutput | ? {$_} | ? {$_} | Select-String -notmatch \"successfully\" );        If($Output -match \":\") { $Output= $Output -Split (\":\");              $obj | add-member -type noteproperty -name \"Entry\" -value $Output[1];                 $obj | add-member -type noteproperty -name \"Resource Type\" -value $Output[3];                     $obj | add-member -type noteproperty -name \"User\" -value $Output[5];                      $obj | add-member -type noteproperty -name \"Flags\" -value $Output[7];                        $obj | add-member -type noteproperty -name \"Condition\" -value $Output[9];                          $obj | add-member -type noteproperty -name \"Accesses\" -value (($AccessesVal -join \",\") -replace \" \",\"\")   }                              else       {            $obj | add-member -type noteproperty -name \"Entry\" -value \"\";      $obj | add-member -type noteproperty -name \"Resource Type\" -value \"\";      $obj | add-member -type noteproperty -name \"User\" -value \"\";      $obj | add-member -type noteproperty -name \"Flags\" -value \"\";      $obj | add-member -type noteproperty -name \"Condition\" -value \"\";      $obj | add-member -type noteproperty -name \"Accesses\" -value \"\";      };                   $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000114 - Global object access auditing of the file system must be configured to record failures"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000114 - Global object access auditing of the file system must be configured to record failures",
                            "nodeGroupsOpen": true,
                            "removeConfirmation": true
                        }
                    ]
                },
                {
                    "AuditPol Tests:Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> System": [
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-System-STIG-AuditPol-Test-WN12-AU-00011-12-Ensure-Audit-System-Integrity-is-set-to-Success-and-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-00011/12 - Ensure 'Audit System Integrity' is set to 'Success and Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "System Integrity": [
                                    {
                                        "check": "equals",
                                        "expected": "Success and Failure",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. System Integrity records events related to violations of integrity to the security subsystem.",
                                        "remediation": "onfigure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> System -> \"Audit System Integrity\" with \"Success\"  and \"Failure\" selected.",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"System Integrity\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-00011/12 - Ensure 'Audit System Integrity' is set to 'Success and Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-00011/12 - Ensure 'Audit System Integrity' is set to 'Success and Failure'",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-System-STIG-AuditPol-Test-WN12-AU-00010-Ensure-Audit-Security-System-Extension-is-set-to-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-00010 - Ensure 'Audit Security System Extension' is set to 'Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Security System Extension": [
                                    {
                                        "check": "equals",
                                        "expected": "Failure",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. Security System Extension records events related to extension code being loaded by the security subsystem.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> System -> \"Audit Security System Extension\" with \"Failure\" selected.",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"Security System Extension\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-00010 - Ensure 'Audit Security System Extension' is set to 'Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-00010 - Ensure 'Audit Security System Extension' is set to 'Failure'",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "AuditPol Tests:Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Account Management": [
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-Account-Management-STIG-AuditPol-Test-WN12-AU-000020-Ensure-Audit-User-Account-Management-is-set-to-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-000020 - Ensure 'Audit User Account Management' is set to 'Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "User Account Management": [
                                    {
                                        "check": "equals",
                                        "expected": "Failure",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. User Account Management records events such as creating, changing, deleting, renaming, disabling, or enabling user accounts.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Account Management -> \"Audit User Account Management\" with \"Failure\" selected.",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"User Account Management\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000020 - Ensure 'Audit User Account Management' is set to 'Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000020 - Ensure 'Audit User Account Management' is set to 'Failure'",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-Account-Management-STIG-AuditPol-Test-WN12-AU-000018-Ensure-Audit-Security-Group-Management-is-set-to-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-000018 - Ensure 'Audit Security Group Management' is set to 'Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Security Group Management": [
                                    {
                                        "check": "equals",
                                        "expected": "Failure",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. Security Group Management records events such as creating, deleting, or changing security groups, including changes in group members.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Account Management -> \"Audit Security Group Management\" with \"Failure\" selected.",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"Security Group Management\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000018 - Ensure 'Audit Security Group Management' is set to 'Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000018 - Ensure 'Audit Security Group Management' is set to 'Failure'",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "AuditPol Tests:Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Logon/Logoff": [
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-Logon-Logoff-STIG-AuditPol-Test-WN12-AU-00047-48-Ensure-Audit-Logon-is-set-to-Success-and-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-00047/48 - Ensure 'Audit Logon' is set to 'Success and Failure'",
                            "error": false,
                            "checks": {
                                "Logon": [
                                    {
                                        "check": "equals",
                                        "expected": "Success and Failure",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. Logon records user logons. If this is an interactive logon, it is recorded on the local system. If it is to a network share, it is recorded on the system accessed.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Logon/Logoff -> \"Audit Logon\" with \"Failure\" and \"Success\" selected.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"Logon\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String \"\\s\\s$APolicySetting\" ;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-00047/48 - Ensure 'Audit Logon' is set to 'Success and Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-00047/48 - Ensure 'Audit Logon' is set to 'Success and Failure'",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "AuditPol Tests:Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Account Logon": [
                        {
                            "id": "STIG-Specific-TestsAuditPol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-Account-Logon-STIG-AuditPol-Test-WN12-AU-000001-2-Ensure-Audit-Credential-Validation-is-set-to-Success-and-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-000001/2 - Ensure 'Audit Credential Validation' is set to 'Success and Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Credential Validation": {
                                    "check": "equals",
                                    "expected": "Success and Failure",
                                    "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. Credential validation records events related to validation tests on credentials for a user account logon.",
                                    "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Account Logon -> \"Audit Credential Validation\" with \"Failure\" and \"Success\" selected.",
                                    "valueSelectList": null
                                }
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"Credential Validation\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String \"$APolicySetting\" ;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000001/2 - Ensure 'Audit Credential Validation' is set to 'Success and Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000001/2 - Ensure 'Audit Credential Validation' is set to 'Success and Failure'",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Auditpol Tests::Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Object Access": [
                        {
                            "id": "STIG-Specific-TestsAuditpol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-Object-Access-STIG-AuditPol-Test-WN12-AU-000060-Ensure-Audit-Central-Access-Policy-Staging-is-set-to-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-000060 - Ensure 'Audit Central Access Policy Staging' is set to 'Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Central Policy Staging": [
                                    {
                                        "check": "equals",
                                        "expected": "Failure",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. Central Access Policy Staging auditing under Object Access is used to enable the recording of events related to differences in permissions between central access policies and proposed policies.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Object Access -> \"Audit Central Access Policy Staging\" with \"Failure\" selected.",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"Central Policy Staging\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000060 - Ensure 'Audit Central Access Policy Staging' is set to 'Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000060 - Ensure 'Audit Central Access Policy Staging' is set to 'Failure'",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsAuditpol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-Object-Access-STIG-AuditPol-Test-WN12-AU-000082-Ensure-Audit-Removable-Storage-is-set-to-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-000082 - Ensure 'Audit Removable Storage' is set to 'Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Removable Storage": [
                                    {
                                        "check": "equals",
                                        "expected": "Failure",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. Removable Storage auditing under Object Access records events related to access attempts on file system objects on removable storage devices.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Object Access -> \"Audit Removable Storage\" with \"Failure\" selected.",
                                        "valueSelectList": null
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"Removable Storage\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000082 - Ensure 'Audit Removable Storage' is set to 'Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000082 - Ensure 'Audit Removable Storage' is set to 'Failure'",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsAuditpol-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Advanced-Audit-Policy-Configuration-System-Audit-Policies-Object-Access-STIG-AuditPol-Test-WN12-AU-000074-Ensure-Audit-Handle-Manipulation-is-set-to-Failure-",
                            "name": "[STIG: AuditPol Test] WN12-AU-000074 - Ensure 'Audit Handle Manipulation' is set to 'Failure'",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "Handle Manipulation": {
                                    "check": "equals",
                                    "expected": "Failure",
                                    "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. Audit logs are necessary to provide a trail of evidence in case the system or network is compromised. Collecting this data is essential for analyzing the security of information assets and detecting signs of suspicious and unexpected behavior. Handle Manipulation auditing under Object Access is needed to correctly enable the recording of events related to the access and changing of files and directories. Auditing must also be enabled on the specific file system objects to be audited.",
                                    "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Advanced Audit Policy Configuration -> System Audit Policies -> Object Access -> \"Audit Handle Manipulation\" with \"Failure\" selected.",
                                    "valueSelectList": null
                                }
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$APolicySetting=\"Handle Manipulation\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;",
                                "description": "[STIG: AuditPol Test] WN12-AU-000074 - Ensure 'Audit Handle Manipulation' is set to 'Failure'"
                            },
                            "description": "[STIG: AuditPol Test] WN12-AU-000074 - Ensure 'Audit Handle Manipulation' is set to 'Failure'",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System -> Remote Assistance": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Remote-Assistance-STIG-Registry-Test-WN12-SO-000062-Turn-on-session-logging-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-SO-000062 - Turn on session logging must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. This setting will turn on session logging for Remote Assistance connections.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Remote Assistance -> \"Turn on session logging\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services' ; $value = 'LoggingEnabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-SO-000062 - Turn on session logging must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-SO-000062 - Turn on session logging must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Remote Desktop Services -> Remote Desktop Session Host -> Device and Resource Redirection": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Remote-Desktop-Services-Remote-Desktop-Session-Host-Device-and-Resource-Redirection-STIG-Registry-Test-WN12-CC-000134-Do-not-allow-smart-card-device-redirection-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000134 - Do not allow smart card device redirection must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "exp": "0",
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Enabling the redirection of smart card devices allows their use within Remote Desktop sessions.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Remote Desktop Services -> Remote Desktop Session Host -> Device and Resource Redirection \"Do not allow smart card device redirection\" to \"Disabled\"."
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services' ; $value = 'fEnableSmartCard';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000134 - Do not allow smart card device redirection must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000134 - Do not allow smart card device redirection must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Remote Desktop Services -> Remote Desktop Session Host -> Printer Redirection": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Remote-Desktop-Services-Remote-Desktop-Session-Host-Printer-Redirection-STIG-Registry-Test-WN12-CC-000136-Redirect-only-the-default-client-printer-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000136 - Redirect only the default client printer must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": {
                                    "check": "equals",
                                    "expected": "1",
                                    "background": "Allowing the redirection of only the default client printer to a Remote Desktop session helps reduce possible exposure of sensitive data.",
                                    "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Remote Desktop Services -> Remote Desktop Session Host -> Printer Redirection \"Redirect only the default client printer\" to \"Enabled\".",
                                    "valueSelectList": null
                                },
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services' ; $value = 'RedirectOnlyDefaultClientPrinter';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000136 - Redirect only the default client printer must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000136 - Redirect only the default client printer must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Remote Desktop Services -> Remote Desktop Session Host -> Remote Session Environment": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Remote-Desktop-Services-Remote-Desktop-Session-Host-Remote-Session-Environment-STIG-Registry-Test-WN12-CC-000137-Remote-Session-Environment-Remove-Disconnect-option-from-Shut-Down-dialog-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000137 - Remote Session Environment \"Remove \"Disconnect\" option from Shut Down dialog must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Removing the Disconnect option from the Shut Down dialog box for Remote Desktop sessions helps prevent disconnected but active sessions from continuing to run and using resources.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Remote Desktop Services -> Remote Desktop Session Host -> Remote Session Environment \"Remove \"Disconnect\" option from Shut Down dialog\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer' ; $value = 'NoDisconnect';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000137 - Remote Session Environment \"Remove \"Disconnect\" option from Shut Down dialog must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000137 - Remote Session Environment \"Remove \"Disconnect\" option from Shut Down dialog must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Network -> Network Connections": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Network-Network-Connections-STIG-Registry-Test-WN12-CC-000006-Route-all-traffic-through-the-internal-network-must-be-Enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000006 - Route all traffic through the internal network must be  Enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "exp": "Enabled",
                                        "check": "equals",
                                        "expected": "Enabled",
                                        "background": "Routing all Direct Access traffic through the internal network allows monitoring and prevents split tunneling.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Network -> Network Connections -> \"Route all traffic through the internal network\" to \"Enabled: Enabled State\"."
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition' ; $value ='Force_Tunneling';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000006 - Route all traffic through the internal network must be  Enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000006 - Route all traffic through the internal network must be  Enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests:: Computer Configuration -> Windows Settings -> Security Settings -> Windows Firewall with Advanced Security -> Windows Firewall with Advanced Security -> Windows Firewall Properties": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Windows-Firewall-with-Advanced-Security-Windows-Firewall-with-Advanced-Security-Windows-Firewall-Properties-STIG-Registry-Test-WN12-FW-000008-The-Windows-Firewall-must-log-dropped-packets-for-the-Domain-Profile",
                            "name": "[STIG: Registry Test] WN12-FW-000008-The Windows Firewall must log dropped packets for the Domain Profile",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "A firewall provides a line of defense against attack. To be effective, it must be enabled and properly configured. Logging of dropped packets for a domain connection will be enabled to maintain an audit trail of potential issues.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Windows Firewall with Advanced Security -> Windows Firewall with Advanced Security -> Windows Firewall Properties (this link will be in the right pane) -> Domain Profile Tab -> Logging (select Customize), \"Log dropped packets\" to \"Yes\".\n\nConfigure a comparable setting if a third-party firewall is used.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\Logging' ; $value = 'LogDroppedPackets';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-FW-000008 - The Windows Firewall must log dropped packets for the Domain Profile"
                            },
                            "description": "[STIG: Registry Test] WN12-FW-000008 - The Windows Firewall must log dropped packets for the Domain Profile",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Windows-Firewall-with-Advanced-Security-Windows-Firewall-with-Advanced-Security-Windows-Firewall-Properties-STIG-Registry-Test-WN12-FW-000005-The-Windows-Firewall-must-block-unicast-responses-to-multicast-or-broadcast-messages-for-the-Domain-Profile",
                            "name": "[STIG: Registry Test] WN12-FW-000005 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Domain Profile",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "A firewall provides a line of defense against attack. To be effective, it must be enabled and properly configured. Unicast responses to multicast or broadcast messages in the domain will be blocked. This helps minimize the risk of an attacker using broadcast or multicast traffic to deliver malicious payloads.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Windows Firewall with Advanced Security -> Windows Firewall with Advanced Security -> Windows Firewall Properties (this link will be in the right pane) -> Domain Profile Tab -> Settings (select Customize) -> Unicast response, \"Allow unicast response\" to \"No\".\n\nConfigure a comparable setting if a third-party firewall is used.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile' ; $value = 'DisableUnicastResponsesToMulticastBroadcast';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-FW-000005 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Domain Profile"
                            },
                            "description": "[STIG: Registry Test] WN12-FW-000005 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Domain Profile",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Windows-Firewall-with-Advanced-Security-Windows-Firewall-with-Advanced-Security-Windows-Firewall-Properties-STIG-Registry-Test-WN12-FW-000007-The-Windows-Firewall-log-size-must-be-configured-for-the-Domain-Profile-",
                            "name": "[STIG: Registry Test] WN12-FW-000007 - The Windows Firewall log size must be configured for the Domain Profile.",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "16384",
                                        "background": "A firewall provides a line of defense against attack. To be effective, it must be enabled and properly configured. The firewall log file size for a domain connection will be set to ensure enough capacity is allocated for audit data.\nSTIG",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Windows Firewall with Advanced Security -> Windows Firewall with Advanced Security -> Windows Firewall Properties (this link will be in the right pane) -> Domain Profile Tab -> Logging (select Customize), \"Size limit (KB):\" to \"16,384\" (or greater).\n\nConfigure a comparable setting if a third-party firewall is used.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\Logging' ; $value = 'LogFileSize';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-FW-000007 - The Windows Firewall log size must be configured for the Domain Profile."
                            },
                            "description": "[STIG: Registry Test] WN12-FW-000007 - The Windows Firewall log size must be configured for the Domain Profile.",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Windows-Firewall-with-Advanced-Security-Windows-Firewall-with-Advanced-Security-Windows-Firewall-Properties-STIG-Registry-Test-WN12-FW-000006-The-Windows-Firewall-log-file-name-and-location-must-be-configured-for-the-Domain-Profile-",
                            "name": "[STIG: Registry Test] WN12-FW-000006 - The Windows Firewall log file name and location must be configured for the Domain Profile.",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "%windir%\\system32\\logfiles\\firewall\\domainfirewall.log",
                                        "background": "A firewall provides a line of defense against attack. To be effective, it must be enabled and properly configured. The location and file name of the firewall log for a domain connection will be defined to ensure the logs are maintained.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Windows Firewall with Advanced Security -> Windows Firewall with Advanced Security -> Windows Firewall Properties (this link will be in the right pane) -> Domain Profile Tab -> Logging (select Customize), \"Name\" to \"%windir%\\system32\\logfiles\\firewall\\domainfirewall.log\".\n\nConfigure a comparable setting if a third-party firewall is used.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\Logging' ; $value = 'LogFilePath';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\";$KeyValue=\"n/a\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-FW-000006 - The Windows Firewall log file name and location must be configured for the Domain Profile."
                            },
                            "description": "[STIG: Registry Test] WN12-FW-000006 - The Windows Firewall log file name and location must be configured for the Domain Profile.",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Windows-Firewall-with-Advanced-Security-Windows-Firewall-with-Advanced-Security-Windows-Firewall-Properties-STIG-Registry-Test-WN12-FW-000014-The-Windows-Firewall-must-block-unicast-responses-to-multicast-or-broadcast-messages-for-the-Private-Profile",
                            "name": "[STIG: Registry Test] WN12-FW-000014 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Private Profile",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "A firewall provides a line of defense against attack. To be effective, it must be enabled and properly configured. Unicast responses to multicast or broadcast messages for a private connection will be blocked. This helps minimize the risk of an attacker using broadcast or multicast traffic to deliver malicious payloads.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Windows Firewall with Advanced Security -> Windows Firewall with Advanced Security -> Windows Firewall Properties (this link will be in the right pane) -> Private Profile Tab -> Settings (select Customize) -> Unicast response, \"Allow unicast response\" to \"No\".\n\nConfigure a comparable setting if a third-party firewall is used.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile' ; $value ='DisableUnicastResponsesToMulticastBroadcast';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-FW-000014 -  The Windows Firewall must block unicast responses to multicast or broadcast messages for the Private Profile"
                            },
                            "description": "[STIG: Registry Test] WN12-FW-000014 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Private Profile",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Windows-Firewall-with-Advanced-Security-Windows-Firewall-with-Advanced-Security-Windows-Firewall-Properties-STIG-Registry-Test-WN12-FW-000015-The-Windows-Firewall-log-file-name-and-location-must-be-configured-for-the-Private-Profile",
                            "name": "[STIG: Registry Test] WN12-FW-000015 - The Windows Firewall log file name and location must be configured for the Private Profile",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "%windir%\\system32\\logfiles\\firewall\\privatefirewall.log",
                                        "background": "A firewall provides a line of defense against attack. To be effective, it must be enabled and properly configured. The location and file name of the firewall log for a private connection will be defined to ensure the logs are maintained.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Windows Firewall with Advanced Security -> Windows Firewall with Advanced Security -> Windows Firewall Properties (this link will be in the right pane) -> Private Profile Tab -> Logging (select Customize), \"Name\" to \"%windir%\\system32\\logfiles\\firewall\\privatefirewall.log\".\n\nConfigure a comparable setting if a third-party firewall is used.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile\\Logging' ; $value ='LogFilePath';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-FW-000015 - The Windows Firewall log file name and location must be configured for the Private Profile"
                            },
                            "description": "[STIG: Registry Test] WN12-FW-000015 - The Windows Firewall log file name and location must be configured for the Private Profile",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Windows-Firewall-with-Advanced-Security-Windows-Firewall-with-Advanced-Security-Windows-Firewall-Properties-STIG-Registry-Test-WN12-FW-000026-The-Windows-Firewall-log-file-name-and-location-must-be-configured-for-the-Public-Profile",
                            "name": "[STIG: Registry Test] WN12-FW-000026 - The Windows Firewall log file name and location must be configured for the Public Profile",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "%windir%\\system32\\logfiles\\firewall\\publicfirewall.log",
                                        "background": "A firewall provides a line of defense against attack. To be effective, it must be enabled and properly configured. The location and file name of the firewall log for a public network connection will be defined to ensure the logs are maintained.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Windows Firewall with Advanced Security -> Windows Firewall with Advanced Security -> Windows Firewall Properties (this link will be in the right pane) -> Public Profile Tab -> Logging (select Customize), \"Name\" to \"%windir%\\system32\\logfiles\\firewall\\publicfirewall.log\".\n\nConfigure a comparable setting if a third-party firewall is used.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile\\Logging' ; $value ='LogFilePath';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-FW-000026 - The Windows Firewall log file name and location must be configured for the Public Profile"
                            },
                            "description": "[STIG: Registry Test] WN12-FW-000026 - The Windows Firewall log file name and location must be configured for the Public Profile",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Windows-Settings-Security-Settings-Windows-Firewall-with-Advanced-Security-Windows-Firewall-with-Advanced-Security-Windows-Firewall-Properties-STIG-Registry-Test-WN12-FW-000023-The-Windows-Firewall-must-block-unicast-responses-to-multicast-or-broadcast-messages-for-the-Public-Profile-",
                            "name": "[STIG: Registry Test] WN12-FW-000023 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Public Profile.",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "A firewall provides a line of defense against attack. To be effective, it must be enabled and properly configured. Unicast responses to multicast or broadcast messages for a public network will be blocked. This helps minimize the risk of an attacker using broadcast or multicast traffic to deliver malicious payloads.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Windows Settings -> Security Settings -> Windows Firewall with Advanced Security -> Windows Firewall with Advanced Security -> Windows Firewall Properties (this link will be in the right pane) -> Public Profile Tab -> Settings (select Customize) -> Unicast response, \"Allow unicast response\" to \"No\".\n\nConfigure a comparable setting if a third-party firewall is used.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile' ; $value ='DisableUnicastResponsesToMulticastBroadcast';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-FW-000023 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Public Profile."
                            },
                            "description": "[STIG: Registry Test] WN12-FW-000023 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Public Profile.",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests:: Computer Configuration -> Administrative Templates -> System -> Power Management -> Video and Display Settings": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Power-Management-Video-and-Display-Settings-STIG-Registry-Test-WN12-CC-000057-Turn-off-the-display-plugged-in-must-be-enabled-with-1200",
                            "name": "[STIG: Registry Test] WN12-CC-000057 - Turn off the display (plugged in) must be enabled with 1200",
                            "error": false,
                            "checks": {
                                "VALUE": {
                                    "cond": [
                                        {
                                            "op": "<=",
                                            "val": "1200"
                                        }
                                    ],
                                    "check": "conditional",
                                    "background": "Turning off an inactive display supports energy saving initiatives.",
                                    "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Power Management -> Video and Display Settings -> \"Turn off the display (plugged in)\" to \"Enabled\" with \"1200\" seconds or less.",
                                    "valueSelectList": null
                                },
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Power\\PowerSettings\\3C0BC021-C8A8-4E07-A973-6B14CBCB2B7E' ; $value = 'ACSettingIndex';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000057 - Turn off the display (plugged in) must be enabled with 1200"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000057 - Turn off the display (plugged in) must be enabled with 1200",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Power-Management-Video-and-Display-Settings-STIG-Registry-Test-WN12-CC-000056-Turn-off-the-display-on-battery-must-be-enabled-with-1200",
                            "name": "[STIG: Registry Test] WN12-CC-000056 - Turn off the display (on battery) must be enabled with 1200",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1200",
                                        "background": "Turning off an inactive display supports energy saving initiatives. It may also extend availability on systems running on a battery.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Power Management -> Video and Display Settings -> \"Turn off the display (on battery)\" to \"Enabled\" with \"1200\" seconds or less.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Power\\PowerSettings\\3C0BC021-C8A8-4E07-A973-6B14CBCB2B7E' ; $value = 'DCSettingIndex';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000056 - Turn off the display (on battery) must be enabled with 1200"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000056 - Turn off the display (on battery) must be enabled with 1200",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Event Log Service -> System": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Event-Log-Service-System-STIG-Registry-Test-WN12-CC-000087-The-System-event-log-must-be-configured-to-a-minimum-size-requirement",
                            "name": "[STIG: Registry Test]  WN12-CC-000087 - The System event log must be configured to a minimum size requirement",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "32768",
                                        "background": "Inadequate log size will cause the log to fill up quickly and require frequent clearing by administrative personnel.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Event Log Service -> System -> \"Specify the maximum log size (KB)\" to at minimum \"Enabled:32768\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\EventLog\\System' ; $value ='MaxSize';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test]  WN12-CC-000087 - The System event log must be configured to a minimum size requirement"
                            },
                            "description": "[STIG: Registry Test]  WN12-CC-000087 - The System event log must be configured to a minimum size requirement",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Windows Remote Management (WinRM)": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Remote-Management-WinRM-STIG-Registry-Test-WN12-CC-0000127-The-Windows-Remote-Management-WinRM-service-must-not-allow-unencrypted-traffic",
                            "name": "[STIG: Registry Test] WN12-CC-0000127 - The Windows Remote Management (WinRM) service must not allow unencrypted traffic",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Unencrypted remote access to a system can allow sensitive information to be compromised. Windows remote management connections must be encrypted to prevent this.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Remote Management (WinRM) -> WinRM Service -> \"Allow unencrypted traffic\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service' ; $value ='AllowUnencryptedTraffic';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-0000127 - The Windows Remote Management (WinRM) service must not allow unencrypted traffic"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-0000127 - The Windows Remote Management (WinRM) service must not allow unencrypted traffic",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Remote-Management-WinRM-STIG-Registry-Test-WN12-CC-0000126-The-Windows-Remote-Management-WinRM-service-must-not-use-Basic-authentication",
                            "name": "[STIG: Registry Test] WN12-CC-0000126 - The Windows Remote Management (WinRM) service must not use Basic authentication",
                            "error": false,
                            "checks": {
                                "VALUE": {
                                    "check": "equals",
                                    "expected": "0",
                                    "background": "Basic authentication uses plain text passwords that could be used to compromise a system.",
                                    "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Remote Management (WinRM) -> WinRM Service -> \"Allow Basic authentication\" to \"Disabled\".",
                                    "valueSelectList": null
                                },
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service' ; $value ='AllowBasic';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-0000126 - The Windows Remote Management (WinRM) service must not use Basic authentication"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-0000126 - The Windows Remote Management (WinRM) service must not use Basic authentication",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Windows Media Player": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Media-Player-STIG-Registry-Test-WN12-CC-0000122-Prevent-Automatic-Updates-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-0000122 - Prevent Automatic Updates must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Uncontrolled system updates can introduce issues to a system. The automatic check for updates performed by Windows Media Player must be disabled to ensure a constant platform and to prevent the introduction of unknown\\untested software on the system.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Media Player -> \"Prevent Automatic Updates\" to \"Enabled\".\n\nWindows Media Player is not installed by default. If it is not installed, this is NA.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsMediaPlayer' ; $value ='DisableAutoupdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-0000122 - Prevent Automatic Updates must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-0000122 - Prevent Automatic Updates must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Media-Player-STIG-Registry-Test-WN12-CC-0000121-Do-Not-Show-First-Use-Dialog-Boxes-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-0000121 - Do Not Show First Use Dialog Boxes must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting prevents users from being presented with Privacy and Installation options on first use of Windows Media Player, which could enable some communication with the vendor.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Media Player -> \"Do Not Show First Use Dialog Boxes\" to \"Enabled\".\n\nWindows Media Player is not installed by default. If it is not installed, this is NA.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsMediaPlayer' ; $value ='GroupPrivacyAcceptance';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-0000121 - Do Not Show First Use Dialog Boxes must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-0000121 - Do Not Show First Use Dialog Boxes must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Windows Media Digital Rights Management": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Media-Digital-Rights-Management-STIG-Registry-Test-WN12-CC-0000120-Prevent-Windows-Media-DRM-Internet-Access-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-0000120 - Prevent Windows Media DRM Internet Access must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This check verifies that Windows Media DRM will be prevented from accessing the Internet.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Media Digital Rights Management -> \"Prevent Windows Media DRM Internet Access\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WMDRM' ; $value ='DisableOnline';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-0000120 - Prevent Windows Media DRM Internet Access must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-0000120 - Prevent Windows Media DRM Internet Access must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System -> Device Installation": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Device-Installation-STIG-Registry-Test-WN12-CC-000019-Allow-remote-access-to-the-Plug-and-Play-interface-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000019 - Allow remote access to the Plug and Play interface must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Remote access to the Plug and Play interface could potentially allow connections by unauthorized devices. This setting configures remote access to the Plug and Play interface and must be disabled.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Device Installation -> \"Allow remote access to the Plug and Play interface\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Settings' ; $value ='AllowRemoteRPC';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000019 - Allow remote access to the Plug and Play interface must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000019 - Allow remote access to the Plug and Play interface must be disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Device-Installation-STIG-Registry-Test-WN12-CC-000022-Prevent-device-metadata-retrieval-from-internet-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000022 - Prevent device metadata retrieval from internet must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting will prevent Windows from retrieving device metadata from the Internet.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Device Installation -> \"Prevent device metadata retrieval from internet\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Device Metadata' ; $value ='PreventDeviceMetadataFromNetwork';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000022 - Prevent device metadata retrieval from internet must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000022 - Prevent device metadata retrieval from internet must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Device-Installation-STIG-Registry-Test-WN12-CC-000023-Prevent-Windows-from-sending-an-error-report-when-a-device-driver-requests-additional-software-during-installation-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000023 - Prevent Windows from sending an error report when a device driver requests additional software during installation must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting will prevent Windows from sending an error report to Microsoft when a device driver requests additional software during installation.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Device Installation -> \"Prevent Windows from sending an error report when a device driver requests additional software during installation\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Settings' ; $value ='DisableSendRequestAdditionalSoftwareToWER';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000023 - Prevent Windows from sending an error report when a device driver requests additional software during installation must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000023 - Prevent Windows from sending an error report when a device driver requests additional software during installation must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Device-Installation-STIG-Registry-Test-WN12-CC-000020-Do-not-send-a-Windows-error-report-when-a-generic-driver-is-installed-on-a-device-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000020 - Do not send a Windows error report when a generic driver is installed on a device must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting prevents an error report from being sent when a generic device driver is installed.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Device Installation -> \"Do not send a Windows error report when a generic driver is installed on a device\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Settings' ; $value ='DisableSendGenericDriverNotFoundToWER';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000020 - Do not send a Windows error report when a generic driver is installed on a device must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000020 - Do not send a Windows error report when a generic driver is installed on a device must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Device-Installation-STIG-Registry-Test-WN12-CC-000021-Prevent-creation-of-a-system-restore-point-during-device-activity-that-would-normally-prompt-creation-of-a-restore-point-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000021 - Prevent creation of a system restore point during device activity that would normally prompt creation of a restore point must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "A system restore point allows a rollback if an issue is encountered when a new device driver is installed.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Device Installation -> \"Prevent creation of a system restore point during device activity that would normally prompt creation of a restore point\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Settings' ; $value ='DisableSystemRestore';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000021 - Prevent creation of a system restore point during device activity that would normally prompt creation of a restore point must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000021 - Prevent creation of a system restore point during device activity that would normally prompt creation of a restore point must be disabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Device-Installation-STIG-Registry-Test-WN12-CC-000024-Specify-search-order-for-device-driver-source-locations-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000024 - Specify search order for device driver source locations must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting will prevent the system from searching Windows Update for device drivers.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Device Installation -> \"Specify search order for device driver source locations\" to \"Enabled: Do not search Windows Update\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value ='SearchOrderConfig';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000024 - Specify search order for device driver source locations must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000024 - Specify search order for device driver source locations must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Device-Installation-STIG-Registry-Test-WN12-CC-000025-Specify-the-search-server-for-device-driver-updates-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000025 - Specify the search server for device driver updates must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Uncontrolled system updates can introduce issues to a system. Obtaining update components from an outside source may also potentially provide sensitive information outside of the enterprise. Device driver updates must be obtained from an internal source.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Device Installation -> \"Specify the search server for device driver updates\" to \"Enabled\" with \"Search Managed Server\" selected.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value ='DriverServerSelection';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000025 - Specify the search server for device driver updates must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000025 - Specify the search server for device driver updates must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-STIG-Registry-Test-WN12-CC-000018-Specify-settings-for-optional-component-installation-and-component-repair-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000018 - Specify settings for optional component installation and component repair must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "2",
                                        "background": "Uncontrolled system updates can introduce issues to a system. Obtaining update components from an outside source may also potentially provide sensitive information outside of the enterprise. Optional component installation or repair must be obtained from an internal source.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> \"Specify settings for optional component installation and component repair\" to \"Enabled\" and with \"Never attempt to download payload from Windows Update\" selected.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Servicing' ; $value ='UseWindowsUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000018 - Specify settings for optional component installation and component repair must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000018 - Specify settings for optional component installation and component repair must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Network -> TCPIP Settings -> Parameters": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Network-TCPIP-Settings-Parameters-STIG-Registry-Test-WN12-CC-000011-Set-IP-Stateless-Autoconfiguration-Limits-State-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000011 - Set IP Stateless Autoconfiguration Limits State must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "IP stateless autoconfiguration could configure routes that circumvent preferred routes if not limited.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Network -> TCPIP Settings -> Parameters -> \"Set IP Stateless Autoconfiguration Limits State\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' ; $value ='EnableIPAutoConfigurationLimits';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000011 - Set IP Stateless Autoconfiguration Limits State must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000011 - Set IP Stateless Autoconfiguration Limits State must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Network -> TCPIP Settings -> IPv6 Transition Technologies": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Network-TCPIP-Settings-IPv6-Transition-Technologies-STIG-Registry-Test-WN12-CC-000010-Set-Teredo-State-must-be-enabled-Disabled-State",
                            "name": "[STIG: Registry Test] WN12-CC-000010 - Set Teredo State must be enabled:Disabled State",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "Disabled",
                                        "background": "IPv6 transition technologies, which tunnel packets through other protocols, do not provide visibility.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Network -> TCPIP Settings -> IPv6 Transition Technologies -> \"Set Teredo State\" to \"Enabled: Disabled State\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition' ; $value ='Teredo_State';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000010 - Set Teredo State must be enabled:Disabled State"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000010 - Set Teredo State must be enabled:Disabled State",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Network-TCPIP-Settings-IPv6-Transition-Technologies-STIG-Registry-Test-WN12-CC-000008-Set-IP-HTTPS-State-must-be-enabled-Disabled-State",
                            "name": "[STIG: Registry Test] WN12-CC-000008 - Set IP-HTTPS State must be enabled:Disabled State",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "3",
                                        "background": "IPv6 transition technologies, which tunnel packets through other protocols, do not provide visibility.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Network -> TCPIP Settings -> IPv6 Transition Technologies -> \"Set IP-HTTPS State\" to \"Enabled: Disabled State\".\n\nNote: \"IPHTTPS URL:\" must be entered in the policy even if set to Disabled State. Enter \"about:blank\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition\\IPHTTPS\\IPHTTPSInterface' ; $value ='IPHTTPS_ClientState';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000008 - Set IP-HTTPS State must be enabled:Disabled State"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000008 - Set IP-HTTPS State must be enabled:Disabled State",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Network-TCPIP-Settings-IPv6-Transition-Technologies-STIG-Registry-Test-WN12-CC-000009-Set-ISATAP-State-must-be-enabled-Disabled-State",
                            "name": "[STIG: Registry Test] WN12-CC-000009 - Set ISATAP State must be enabled:Disabled State",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "Disabled",
                                        "background": "IPv6 transition technologies, which tunnel packets through other protocols, do not provide visibility.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Network -> TCPIP Settings -> IPv6 Transition Technologies -> \"Set ISATAP State\" to \"Enabled: Disabled State\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition' ; $value ='ISATAP_State';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000009 - Set Set ISATAP State must be enabled:Disabled State"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000009 - Set ISATAP State must be enabled:Disabled State",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Network-TCPIP-Settings-IPv6-Transition-Technologies-STIG-Registry-Test-WN12-CC-000007-Set-6to4-State-must-be-enabled-Disabled-State",
                            "name": "[STIG: Registry Test] WN12-CC-000007 - Set 6to4 State must be enabled:Disabled State",
                            "error": false,
                            "checks": {
                                "VALUE": {
                                    "check": "equals",
                                    "expected": "Disabled",
                                    "background": "IPv6 transition technologies, which tunnel packets through other protocols, do not provide visibility.",
                                    "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Network -> TCPIP Settings -> IPv6 Transition Technologies -> \"Set 6to4 State\" to \"Enabled: Disabled State\".",
                                    "valueSelectList": null
                                },
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition' ; $value ='6to4_State';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000007 - Set 6to4 State must be enabled:Disabled State"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000007 - Set 6to4 State must be enabled:Disabled State",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests:Computer Configuration -> Administrative Templates -> Printers": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Printers-STIG-Registry-Test-WN12-CC-000016-Extend-Point-and-Print-connection-to-search-Windows-Update-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000016 - Extend Point and Print connection to search Windows Update must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting will prevent Windows from searching Windows Update for point and print drivers. Only the local driver store and server driver cache will be searched.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Printers -> \"Extend Point and Print connection to search Windows Update\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Printers' ; $value ='DoNotInstallCompatibleDriverFromWindowsUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000016 - Extend Point and Print connection to search Windows Update must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000016 - Extend Point and Print connection to search Windows Update must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System -> Troubleshooting and Diagnostics": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Troubleshooting-and-Diagnostics-STIG-Registry-Test-WN12-CC-000068-Enable-Disable-PerfTrack-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000068 - Enable/Disable PerfTrack must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting prevents responsiveness events from being aggregated and sent to Microsoft.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Troubleshooting and Diagnostics -> Windows Performance PerfTrack -> \"Enable/Disable PerfTrack\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\WDI\\{9c5a40da-b965-4fc3-8781-88dd50a6299d}' ; $value ='ScenarioExecutionEnabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000068 - Enable/Disable PerfTrack must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000068 - Enable/Disable PerfTrack must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Configuration -> Administrative Templates -> System -> Troubleshooting and Diagnostics -> Scripted Diagnostics": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Configuration-Administrative-Templates-System-Troubleshooting-and-Diagnostics-Scripted-Diagnostics-STIG-Registry-Test-WN12-CC-000067-Troubleshooting-Allow-users-to-access-online-troubleshooting-content-on-Microsoft-servers-from-the-Troubleshooting-Control-Panel-via-Windows-Online-Troubleshooting-Service-WOTS-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000067 - Troubleshooting: Allow users to access online troubleshooting content on Microsoft servers from the Troubleshooting Control Panel (via Windows Online Troubleshooting Service - WOTS) must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting prevents users from searching troubleshooting content on Microsoft servers. Only local content will be available.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Troubleshooting and Diagnostics -> Scripted Diagnostics -> \"Troubleshooting: Allow users to access online troubleshooting content on Microsoft servers from the Troubleshooting Control Panel (via Windows Online Troubleshooting Service - WOTS)\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\ScriptedDiagnosticsProvider\\Policy' ; $value ='EnableQueryRemoteServer';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000067 - Troubleshooting: Allow users to access online troubleshooting content on Microsoft servers from the Troubleshooting Control Panel (via Windows Online Troubleshooting Service - WOTS) must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000067 - Troubleshooting: Allow users to access online troubleshooting content on Microsoft servers from the Troubleshooting Control Panel (via Windows Online Troubleshooting Service - WOTS) must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System -> Remote Procedure Call": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Remote-Procedure-Call-STIG-Registry-Test-WN12-CC-000064-Restrict-Unauthenticated-RPC-clients-must-be-enabled-and-Authenticated",
                            "name": "[STIG: Registry Test] WN12-CC-000064 - Restrict Unauthenticated RPC clients must be enabled and Authenticated",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Configuring RPC to restrict unauthenticated RPC clients from connecting to the RPC server will prevent anonymous connections.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Remote Procedure Call -> \"Restrict Unauthenticated RPC clients\" to \"Enabled\" and \"Authenticated\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Rpc' ; $value ='RestrictRemoteClients';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000064 - Restrict Unauthenticated RPC clients must be enabled and Authenticated"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000064 - Restrict Unauthenticated RPC clients must be enabled and Authenticated",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Remote-Procedure-Call-STIG-Registry-Test-WN12-CC-000063-Enable-RPC-Endpoint-Mapper-Client-Authentication-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000063 - Enable RPC Endpoint Mapper Client Authentication must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Configuring RPC to require authentication to the RPC Endpoint Mapper will force clients to provide authentication before RPC communication is established.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Remote Procedure Call -> \"Enable RPC Endpoint Mapper Client Authentication\" to \"Enabled.",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Rpc' ; $value ='EnableAuthEpResolution';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000063 - Enable RPC Endpoint Mapper Client Authentication must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000063 - Enable RPC Endpoint Mapper Client Authentication must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System -> Troubleshooting and Diagnostics -> Application Compatibility Diagnostics": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Troubleshooting-and-Diagnostics-Application-Compatibility-Diagnostics-STIG-Registry-Test-WN12-CC-000065-Detect-compatibility-issues-for-applications-and-drivers-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000065 - Detect compatibility issues for applications and drivers must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Troubleshooting and Diagnostics -> Application Compatibility Diagnostics -> \"Detect compatibility issues for applications and drivers\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\AppCompat' ; $value ='DisablePcaUI';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000065 - Detect compatibility issues for applications and drivers must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000065 - Detect compatibility issues for applications and drivers must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Windows Error Reporting": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Error-Reporting-STIG-Registry-Test-WN12-CC-000114-Do-not-send-additional-data-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000114 - Do not send additional data must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": {
                                    "check": "equals",
                                    "expected": "1",
                                    "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting prevents additional data requests in response to Error Reporting.",
                                    "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Error Reporting -> \"Do not send additional data\" to \"Enabled\".",
                                    "valueSelectList": null
                                },
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Windows Error Reporting' ; $value ='DontSendAdditionalData';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000114 - Do not send additional data must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000114 - Do not send additional data must be enabled",
                            "nodeGroupsOpen": true
                        },
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Error-Reporting-STIG-Registry-Test-WN12-CC-000112-Disable-Logging-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000112 - Disable Logging must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Maintaining an audit trail of system activity logs can help identify configuration errors, troubleshoot service disruptions, and analyze compromises that have occurred, as well as detect attacks. This setting ensures that Error Reporting events will be logged in the system event log.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Error Reporting -> \"Disable Logging\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Windows Error Reporting' ; $value ='LoggingDisabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000112 - Disable Logging must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000112 - Disable Logging must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Windows Defender": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Defender-STIG-Registry-Test-WN12-CC-000111-Configure-Microsoft-Active-Protection-Service-Reporting-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000111 - Configure Microsoft Active Protection Service Reporting must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting disables Microsoft Active Protection Service membership and reporting.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Defender -> \"Configure Microsoft Active Protection Service Reporting \" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows Defender\\Spynet' ; $value ='SpyNetReporting';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000111 - Configure Microsoft Active Protection Service Reporting must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000111 - Configure Microsoft Active Protection Service Reporting must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Windows Logon Options": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Logon-Options-STIG-Registry-Test-WN12-CC-000119-Report-when-logon-server-was-not-available-during-user-logon-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000119 -  Report when logon server was not available during user logon must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Notifying a user whether cached credentials were used may make them aware of connection issues.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Logon Options -> \"Report when logon server was not available during user logon\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value ='ReportControllerMissing';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000119 -  Report when logon server was not available during user logon must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000119 -  Report when logon server was not available during user logon must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Regisstry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Event Log Service": [
                        {
                            "id": "STIG-Specific-TestsRegisstry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Event-Log-Service-STIG-Registry-Test-WN12-CC-000086-Specify-the-maximum-log-size-KB-to-at-minimum-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000086 - Specify the maximum log size (KB) to at minimum  must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "32768",
                                        "background": "Inadequate log size will cause the log to fill up quickly and require frequent clearing by administrative personnel.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Event Log Service -> Setup -> \"Specify the maximum log size (KB)\" to at minimum \"Enabled:32768\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\EventLog\\Setup' ; $value ='MaxSize';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000086 - Specify the maximum log size (KB) to at minimum  must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000086 - Specify the maximum log size (KB) to at minimum  must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> System -> Driver Installation": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-System-Driver-Installation-STIG-Registry-Test-WN12-CC-000026-Turn-off-Windows-Update-device-driver-search-prompt-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000026 - Turn off Windows Update device driver search prompt must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting prevents users from being prompted to search Windows Update for device drivers.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> System -> Driver Installation -> \"Turn off Windows Update device driver search prompt\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value ='DontPromptForWindowsUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000026 - Turn off Windows Update device driver search prompt must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000026 - Turn off Windows Update device driver search prompt must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Windows Installer": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Windows-Installer-STIG-Registry-Test-WN12-CC-000118-Prohibit-non-administrators-from-applying-vendor-signed-updates-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000118 - Prohibit non-administrators from applying vendor signed updates must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Uncontrolled system updates can introduce issues to a system. This setting will prevent users from applying vendor-signed updates (though they may be from a trusted source).",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Windows Installer -> \"Prohibit non-administrators from applying vendor signed updates\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value ='DriverServerSelection';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000118 - Prohibit non-administrators from applying vendor signed updates must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000118 - Prohibit non-administrators from applying vendor signed updates must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Biometrics": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Biometrics-STIG-Registry-Test-WN12-CC-000075-Allow-the-use-of-biometrics-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000075 - Allow the use of biometrics must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Allowing biometrics may bypass required authentication methods. Biometrics may only be used as an additional authentication factor where an enhanced strength of identity credential is necessary or desirable. Additional factors must be met per DoD policy.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Biometrics -> \"Allow the use of biometrics\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\SOFTWARE\\Policies\\Microsoft\\Biometrics' ; $value ='Enabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000075 - Allow the use of biometrics must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000075 - Allow the use of biometrics must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Application Compatibility": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Application-Compatibility-STIG-Registry-Test-WN12-CC-000071-Turn-off-Inventory-Collector-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000071 - Turn off Inventory Collector must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Some features may communicate with the vendor, sending system information or downloading data or components for the feature. Turning off this capability will prevent potentially sensitive information from being sent outside the enterprise and uncontrolled updates to the system. This setting will prevent the Program Inventory from collecting data about a system and sending the information to Microsoft.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Application Compatibility -> \"Turn off Inventory Collector\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\AppCompat' ; $value ='DisableInventory';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000071 - Turn off Inventory Collector must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000071 - Turn off Inventory Collector must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> App Package Deployment": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-App-Package-Deployment-STIG-Registry-Test-WN12-CC-000070-Allow-all-trusted-apps-to-install-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000070 - Allow all trusted apps to install must be enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Enabling trusted app installation allows for enterprise line of business Windows 8 type apps. A trusted app package is one that is signed with a certificate chain that can be successfully validated in the enterprise. Configuring this ensures enterprise line of business apps are accessible.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> App Package Deployment -> \"Allow all trusted apps to install\" to \"Enabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Appx' ; $value ='AllowAllTrustedApps';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000070 - Allow all trusted apps to install must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000070 - Allow all trusted apps to install must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> AutoPlay Policies": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-AutoPlay-Policies-STIG-Registry-Test-WN12-CC-000073-Set-the-default-behavior-for-AutoRun-to-enabled",
                            "name": "[STIG: Registry Test] WN12-CC-000073 - Set the default behavior for AutoRun to enabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Allowing autorun commands to execute may introduce malicious code to a system. Configuring this setting prevents autorun commands from executing.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> AutoPlay Policies -> \"Set the default behavior for AutoRun\" to \"Enabled:Do not execute any autorun commands\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer' ; $value ='NoAutorun';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000073 - Set the default behavior for AutoRun to enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000073 - Set the default behavior for AutoRun to enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> RSS Feeds": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-RSS-Feeds-STIG-Registry-Test-WN12-CC-000106-Turn-on-Basic-feed-authentication-over-HTTP-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000106 - Turn on Basic feed authentication over HTTP must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "Basic authentication uses plain text passwords that could be used to compromise a system.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> RSS Feeds -> \"Turn on Basic feed authentication over HTTP\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Internet Explorer\\Feeds' ; $value ='AllowBasicAuthInClear';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000106 - Turn on Basic feed authentication over HTTP must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000106 - Turn on Basic feed authentication over HTTP must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::Computer Configuration -> Administrative Templates -> Windows Components -> Remote Desktop Services -> Remote Desktop Session Host -> Temporary Folders": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Computer-Configuration-Administrative-Templates-Windows-Components-Remote-Desktop-Services-Remote-Desktop-Session-Host-Temporary-Folders-STIG-Registry-Test-WN12-CC-000103-Do-not-delete-temp-folder-upon-exitDo-not-delete-temp-folder-upon-exit-must-be-disabled",
                            "name": "[STIG: Registry Test] WN12-CC-000103 - Do not delete temp folder upon exitDo not delete temp folder upon exit must be disabled",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "check": "equals",
                                        "expected": "1",
                                        "background": "Remote desktop session temporary folders must always be deleted after a session is over to prevent hard disk clutter and potential leakage of information. This setting controls the deletion of the temporary folders when the session is terminated.",
                                        "remediation": "Configure the policy value for Computer Configuration -> Administrative Templates -> Windows Components -> Remote Desktop Services -> Remote Desktop Session Host -> Temporary Folders -> \"Do not delete temp folder upon exit\" to \"Disabled\".",
                                        "valueSelectList": null
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services' ; $value ='DeleteTempDirsOnExit';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-CC-000103 - Do not delete temp folder upon exitDo not delete temp folder upon exit must be disabled"
                            },
                            "description": "[STIG: Registry Test] WN12-CC-000103 - Do not delete temp folder upon exitDo not delete temp folder upon exit must be disabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests:Registry Entry Permisison Check": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-Registry-Entry-Permisison-Check-STIG-Registry-Test-WN12-RG-000003-Local-administrator-accounts-must-have-their-privileged-token-filtered-to-prevent-elevated-privileges-from-being-used-over-the-network-on-domain-systems-",
                            "name": "[STIG: Registry Test] WN12-RG-000003 - Local administrator accounts must have their privileged token filtered to prevent elevated privileges from being used over the network on domain systems.",
                            "error": false,
                            "checks": {
                                "VALUE": [
                                    {
                                        "exp": "0",
                                        "check": "equals",
                                        "expected": "0",
                                        "background": "A compromised local administrator account can provide means for an attacker to move laterally between domain systems. With User Account Control enabled, filtering the privileged token for local administrator accounts will prevent the elevated privileges of these accounts from being used over the network.",
                                        "remediation": "Configure the following registry value:\n\nRegistry Hive: HKEY_LOCAL_MACHINE\nRegistry Path: \\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\n\nValue Name: LocalAccountTokenFilterPolicy\n\nType: REG_DWORD\nValue: 0"
                                    }
                                ],
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$key= 'HKLM:\\\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value ='LocalAccountTokenFilterPolicy';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;",
                                "description": "[STIG: Registry Test] WN12-RG-000003 - Local administrator accounts must have their privileged token filtered to prevent elevated privileges from being used over the network on domain systems."
                            },
                            "description": "[STIG: Registry Test] WN12-RG-000003 - Local administrator accounts must have their privileged token filtered to prevent elevated privileges from being used over the network on domain systems.",
                            "nodeGroupsOpen": true
                        }
                    ]
                },
                {
                    "Registry Tests::User Configuration -> Administrative Templates -> Start Menu and Taskbar -> Notifications": [
                        {
                            "id": "STIG-Specific-TestsRegistry-Tests-User-Configuration-Administrative-Templates-Start-Menu-and-Taskbar-Notifications-STIG-Registry-Test-WN12-UC-000005-Turn-off-notifications-network-usage-must-be-enabled",
                            "name": "[STIG: Registry Test] WN12-UC-000005 - Turn off notifications network usage must be enabled",
                            "error": false,
                            "checks": {
                                "present": [
                                    {
                                        "check": "equals",
                                        "expected": "true"
                                    }
                                ],
                                "RegistryConfigured": [
                                    {
                                        "exp": "true",
                                        "check": "equals",
                                        "expected": "true",
                                        "background": "The Windows Push Notification Service (WNS) allows third-party vendors to send updates for toasts, tiles, and badges.",
                                        "remediation": "Configure the policy value for User Configuration -> Administrative Templates -> Start Menu and Taskbar -> Notifications -> \"Turn off notifications network usage\" to \"Enabled\"."
                                    }
                                ]
                            },
                            "ci_path": null,
                            "check_type": "powershell",
                            "powershell": {
                                "query": "$objArray = @(); $RegistryPath = 'SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\PushNotifications'; $RegistryValues = @{ 'NoCloudApplicationNotification' = '1'    } ;    if (!(Get-PSDrive HKU -ErrorAction SilentlyContinue))   {      New-PSDrive -Name HKU -PSProvider Registry -Root Registry::HKEY_USERS | Out-Null  } ;      $sids = get-childItem HKU: | ? {$_.Name -match 'S-\\d-\\d+-(\\d+-){1,14}\\d+$' } | % { $_.Name.Replace('HKEY_USERS\\','') };          $sids | foreach {           $sid = $_;        $objSID = New-Object System.Security.Principal.SecurityIdentifier (\"$sid\");         $objUser = $objSID.Translate( [System.Security.Principal.NTAccount]);             if (($RegistryValues.GetEnumerator() |        where { ((Get-ItemProperty \"HKU:$sid\\$RegistryPath\" -Name $_.Key -ErrorAction SilentlyContinue).($_.Key) -eq $_.Value) }).Count -eq $RegistryValues.Count)             {  $obj=new-object psobject;            $obj | Add-Member -type NoteProperty -name \"UserName\" -Value $objUser.Value;            $obj | Add-Member -type NoteProperty -name \"RegistryConfigured\" -Value $True;             $objArray += $obj;  }                                        else {              $obj=new-object psobject;                                    $obj | Add-Member -type NoteProperty -name \"UserName\" -Value $objUser.Value;             $obj | Add-Member -type NoteProperty -name \"RegistryConfigured\" -Value $false; $objArray += $obj; }; } ; $objArray | Select UserName,RegistryConfigured",
                                "key_name": "Id",
                                "description": "[STIG: Registry Test] WN12-UC-000005 - Turn off notifications network usage must be enabled"
                            },
                            "description": "[STIG: Registry Test] WN12-UC-000005 - Turn off notifications network usage must be enabled",
                            "nodeGroupsOpen": true
                        }
                    ]
                }
            ]
        },
        {
            "Policy Version": [
                {
                    "id": "Policy-VersionPolicy-Version",
                    "name": "Policy Version",
                    "error": false,
                    "checks": {
                        "present": [
                            {
                                "check": "equals",
                                "expected": "true"
                            }
                        ]
                    },
                    "ci_path": null,
                    "check_type": "powershell",
                    "powershell": {
                        "query": "echo \"20171006-6\"",
                        "description": "Policy Version"
                    },
                    "description": "Policy Version",
                    "nodeGroupsOpen": true
                }
            ]
        }
    ],
    "scan_options": {
        "powershell_queries": [
            {
                "description": "[STIG: Registry Test] WN12-SO-000009 - Audit policy using subcategories must be enabled",
                "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Lsa' ; $value = 'SCENoApplyLegacyAuditPolicy';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Lsa' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $KeyValue; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000007 - Audit the access of global system objects must be disabled",
                "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Lsa' ; $value = 'AuditBaseObjects';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Control\\Lsa' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $KeyValue; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000055-DC - Network access: Named pipes that can be accessed anonymously  must be set to \"netlogon, samr, lsarpc\"",
                "query": "$key= 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Services\\LanManServer\\Parameters' ; $value = 'NullSessionPipes';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\SYSTEM\\CurrentControlSet\\Services\\LanManServer\\Parameters' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value ($keyValue -Join \",\"); $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000090 - Domain controller: LDAP server signing requirements must be set to Require signing",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\NTDS\\Parameters' ; $value = 'LDAPServerIntegrity';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000008 - Audit: Audit the use of Backup and Restore privilege must be disabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'FullPrivilegeAuditing';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000048 - MSS: (TcpMaxDataRetransmissions) How many times unacknowledged data is retransmitted must be set to 3 or less",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' ; $value = 'TcpMaxDataRetransmissions';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\";} }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000046 - MSS: (ScreenSaverGracePeriod) The time in seconds before the screen saver grace period expires (0 recommended) to 5.",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' ; $value = 'ScreenSaverGracePeriod';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\";} }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000042 - MSS: (NoDefaultExempt) Configure IPSec exemptions for various types of network traffic must be set to Only ISAKMP is exempt (recommended for Windows Server 2003)",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\IPSEC' ; $value = 'NoDefaultExempt';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000081 - User Account Control: Only elevate executables that are signed and validated must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value = 'ValidateAdminCodeSignatures';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000087 - System settings: Use Certificate Rules on Windows Executables for Software Restriction Policies must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers' ; $value = 'AuthenticodeEnabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000015 - Domain member: Disable machine account password changes must be disabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters' ; $value = 'DisablePasswordChange';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000013 - Domain member: Digitally encrypt secure channel data (when possible) must be enabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters' ; $value = 'SealSecureChannel';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG:Registry Test] WN12-SO-000011 - Devices: Allowed to format and eject removable media must be set to Administrators",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' ; $value = 'AllocateDASD';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG:Registry Test] WN12-SO-000053 - Network access: Do not allow storage of passwords and credentials for network authentication must be enabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'DisableDomainCreds';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG:Registry Test] WN12-SO-000052 - Network access: Do not allow anonymous enumeration of SAM accounts and shares must be enabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'RestrictAnonymous';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG:Registry Test] WN12-SO-000051 - Network access: Do not allow anonymous enumeration of SAM accounts must be enabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'RestrictAnonymousSAM';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG:Registry Test] WN12-SO-000054 - Network access: Let everyone permissions apply to anonymous users must be disabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa' ; $value = 'EveryoneIncludesAnonymous';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000024 - Interactive Logon: Number of previous logons to cache (in case domain controller is not available)",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' ; $value ='CachedLogonsCount';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000038 - MSS: (DisableIPSourceRouting) IP source routing protection level (protects against packet spoofing) to Highest protection, source routing is completely disabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' ;  $value ='DisableIPSourceRouting';    $KeyPresent=Test-Path $key ;    if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; }    else { $KeyPresent=\"YES\";    Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value;    $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\"; } }     $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent;     $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent;     $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000035 - Microsoft network server: Server SPN target name validation level  to Off",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters' ;  $value ='SmbServerNameHardeningLevel';    $KeyPresent=Test-Path $key ;    if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; }    else { $KeyPresent=\"YES\";    Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value;    $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\"; } }     $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent;     $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent;     $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000033 - Microsoft network server: Digitally sign communications (if client agrees) must be enabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters' ; $value ='EnableSecuritySignature';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000032 - Microsoft network server: Digitally sign communications (always) must be enabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters' ; $value ='RequireSecuritySignature';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000071 - Recovery console: Allow automatic administrative logon must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Setup\\RecoveryConsole' ; $value ='SecurityLevel';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000072 - Recovery console: Allow floppy copy and access to all drives and folders must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Setup\\RecoveryConsole' ; $value ='SetCommand';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000074 - System cryptography: Use FIPS compliant algorithms for encryption, hashing, and signing must be enabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Control\\Lsa\\FIPSAlgorithmPolicy' ; $value ='Enabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000078 - User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode to Prompt for consent",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value ='ConsentPromptBehaviorAdmin';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000049 - Always use classic logon must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value = 'LogonType';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000044 - Turn off the Windows Messenger Customer Experience Improvement Program must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Messenger\\Client' ; $value = 'CEIP';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000047 - Turn off Windows Update device driver searching must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value = 'DontSearchWindowsUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000031 - Turn off Automatic Root Certificates Update must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\SystemCertificates\\AuthRoot' ; $value ='DisableRootAutoUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000030 - Turn off access to the Store must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Explorer' ; $value ='NoUseStoreOpenWith';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000033 - Turn off Event Viewer \"Events.asp\" links must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\EventViewer' ; $value ='MicrosoftEventVwrDisableLinks';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000038 - Turn off Internet File Association service must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer' ; $value ='NoInternetOpenWith';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-AD-000008-DC - The time synchronization tool must be configured to enable logging of time source switching",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\W32Time\\Config' ; $value = 'EventLogFlags';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000069 - Configure Windows NTP Client  must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\W32time\\Parameters' ; $value = 'Type';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-AD-000007-DC-chk1:Time synchronization must be enabled on the domain controller",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpClient' ; $value ='Enabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ;$obj"
            },
            {
                "description": "[STIG: Registry Test] WN12-AD-000007-DC-chk2:Time synchronization must be enabled on the domain controller",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\W32Time\\Parameters' ; $value ='Type';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }   $obj1 = New-Object psobject;  $obj1 | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj1 | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj1 | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj1;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000069 - Configure Windows NTP Server must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\W32time\\Parameters' ; $value ='NTPServer';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000031/32 - Ensure 'Audit Directory Service Access' is set to 'Success and Failure'",
                "query": "$APolicySetting=\"Directory Service Access\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000035/36 - Ensure 'Audit Directory Service Changes' is set to 'Success and Failure'",
                "query": "$APolicySetting=\"Directory Service Changes\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000116 - Global object access auditing of the registry must be configured to record failures",
                "query": "$APolicyOutput= (Invoke-Expression \"Auditpol /resourceSACL /type:Key /view \") ;  $obj=new-object psobject;    $AccessesVal= ($APolicyOutput | ? {$_} | ? {$_} | Select-String -notmatch \"successfully\" ) | Select -skip 6 ;    $Output=($APolicyOutput | ? {$_} | ? {$_} | Select-String -notmatch \"successfully\" );     If($Output -match \":\") { $Output= $Output -Split (\":\");      $obj | add-member -type noteproperty -name \"Entry\" -value $Output[1];       $obj | add-member -type noteproperty -name \"Resource Type\" -value $Output[3];       $obj | add-member -type noteproperty -name \"User\" -value $Output[5];      $obj | add-member -type noteproperty -name \"Flags\" -value $Output[7];      $obj | add-member -type noteproperty -name \"Condition\" -value $Output[9];      $obj | add-member -type noteproperty -name \"Accesses\" -value ($AccessesVal -join \",\").Trim()      }       else       {            $obj | add-member -type noteproperty -name \"Entry\" -value \"\";      $obj | add-member -type noteproperty -name \"Resource Type\" -value \"\";      $obj | add-member -type noteproperty -name \"User\" -value \"\";      $obj | add-member -type noteproperty -name \"Flags\" -value \"\";      $obj | add-member -type noteproperty -name \"Condition\" -value \"\";      $obj | add-member -type noteproperty -name \"Accesses\" -value \"\";      };                   $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000114 - Global object access auditing of the file system must be configured to record failures",
                "query": "$APolicyOutput= (Invoke-Expression \"Auditpol /resourceSACL /type:File /view \");   $obj=new-object psobject;      $AccessesVal= ($APolicyOutput | ? {$_} | ? {$_} | Select-String -notmatch \"successfully\" )  | Select -skip 6 ;        $Output=($APolicyOutput | ? {$_} | ? {$_} | Select-String -notmatch \"successfully\" );        If($Output -match \":\") { $Output= $Output -Split (\":\");              $obj | add-member -type noteproperty -name \"Entry\" -value $Output[1];                 $obj | add-member -type noteproperty -name \"Resource Type\" -value $Output[3];                     $obj | add-member -type noteproperty -name \"User\" -value $Output[5];                      $obj | add-member -type noteproperty -name \"Flags\" -value $Output[7];                        $obj | add-member -type noteproperty -name \"Condition\" -value $Output[9];                          $obj | add-member -type noteproperty -name \"Accesses\" -value (($AccessesVal -join \",\") -replace \" \",\"\")   }                              else       {            $obj | add-member -type noteproperty -name \"Entry\" -value \"\";      $obj | add-member -type noteproperty -name \"Resource Type\" -value \"\";      $obj | add-member -type noteproperty -name \"User\" -value \"\";      $obj | add-member -type noteproperty -name \"Flags\" -value \"\";      $obj | add-member -type noteproperty -name \"Condition\" -value \"\";      $obj | add-member -type noteproperty -name \"Accesses\" -value \"\";      };                   $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-00011/12 - Ensure 'Audit System Integrity' is set to 'Success and Failure'",
                "query": "$APolicySetting=\"System Integrity\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-00010 - Ensure 'Audit Security System Extension' is set to 'Failure'",
                "query": "$APolicySetting=\"Security System Extension\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000020 - Ensure 'Audit User Account Management' is set to 'Failure'",
                "query": "$APolicySetting=\"User Account Management\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000018 - Ensure 'Audit Security Group Management' is set to 'Failure'",
                "query": "$APolicySetting=\"Security Group Management\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-00047/48 - Ensure 'Audit Logon' is set to 'Success and Failure'",
                "query": "$APolicySetting=\"Logon\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String \"\\s\\s$APolicySetting\" ;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000001/2 - Ensure 'Audit Credential Validation' is set to 'Success and Failure'",
                "query": "$APolicySetting=\"Credential Validation\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String \"$APolicySetting\" ;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000060 - Ensure 'Audit Central Access Policy Staging' is set to 'Failure'",
                "query": "$APolicySetting=\"Central Policy Staging\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000082 - Ensure 'Audit Removable Storage' is set to 'Failure'",
                "query": "$APolicySetting=\"Removable Storage\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: AuditPol Test] WN12-AU-000074 - Ensure 'Audit Handle Manipulation' is set to 'Failure'",
                "query": "$APolicySetting=\"Handle Manipulation\";  $APolicyOutput= (Invoke-Expression \"auditpol /get /category:* \") | Select-String $APolicySetting;  $obj = New-Object psobject;   if ($APolicyOutput){      $APolicyOutput -match '  ([a-z, /-]+)  ([a-z, ]+)' | Out-Null;     $APolicyStatus= $Matches[2];     $obj | add-member -Type NoteProperty -Name $APolicySetting -Value $APolicyStatus;      }          else { $obj | add-member -Type Noteproperty -Name $APolicySetting  -Value \"Setting does not exists\";}      $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-SO-000062 - Turn on session logging must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services' ; $value = 'LoggingEnabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000134 - Do not allow smart card device redirection must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services' ; $value = 'fEnableSmartCard';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000136 - Redirect only the default client printer must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services' ; $value = 'RedirectOnlyDefaultClientPrinter';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000137 - Remote Session Environment \"Remove \"Disconnect\" option from Shut Down dialog must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer' ; $value = 'NoDisconnect';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000006 - Route all traffic through the internal network must be  Enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition' ; $value ='Force_Tunneling';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-FW-000008 - The Windows Firewall must log dropped packets for the Domain Profile",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\Logging' ; $value = 'LogDroppedPackets';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-FW-000005 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Domain Profile",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile' ; $value = 'DisableUnicastResponsesToMulticastBroadcast';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-FW-000007 - The Windows Firewall log size must be configured for the Domain Profile.",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\Logging' ; $value = 'LogFileSize';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-FW-000006 - The Windows Firewall log file name and location must be configured for the Domain Profile.",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\Logging' ; $value = 'LogFilePath';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\";$KeyValue=\"n/a\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-FW-000014 -  The Windows Firewall must block unicast responses to multicast or broadcast messages for the Private Profile",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile' ; $value ='DisableUnicastResponsesToMulticastBroadcast';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-FW-000015 - The Windows Firewall log file name and location must be configured for the Private Profile",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\PrivateProfile\\Logging' ; $value ='LogFilePath';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-FW-000026 - The Windows Firewall log file name and location must be configured for the Public Profile",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile\\Logging' ; $value ='LogFilePath';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-FW-000023 - The Windows Firewall must block unicast responses to multicast or broadcast messages for the Public Profile.",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsFirewall\\PublicProfile' ; $value ='DisableUnicastResponsesToMulticastBroadcast';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000057 - Turn off the display (plugged in) must be enabled with 1200",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Power\\PowerSettings\\3C0BC021-C8A8-4E07-A973-6B14CBCB2B7E' ; $value = 'ACSettingIndex';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000056 - Turn off the display (on battery) must be enabled with 1200",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Power\\PowerSettings\\3C0BC021-C8A8-4E07-A973-6B14CBCB2B7E' ; $value = 'DCSettingIndex';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test]  WN12-CC-000087 - The System event log must be configured to a minimum size requirement",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\EventLog\\System' ; $value ='MaxSize';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-0000127 - The Windows Remote Management (WinRM) service must not allow unencrypted traffic",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service' ; $value ='AllowUnencryptedTraffic';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-0000126 - The Windows Remote Management (WinRM) service must not use Basic authentication",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service' ; $value ='AllowBasic';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-0000122 - Prevent Automatic Updates must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsMediaPlayer' ; $value ='DisableAutoupdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-0000121 - Do Not Show First Use Dialog Boxes must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WindowsMediaPlayer' ; $value ='GroupPrivacyAcceptance';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-0000120 - Prevent Windows Media DRM Internet Access must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\WMDRM' ; $value ='DisableOnline';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000019 - Allow remote access to the Plug and Play interface must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Settings' ; $value ='AllowRemoteRPC';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000022 - Prevent device metadata retrieval from internet must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Device Metadata' ; $value ='PreventDeviceMetadataFromNetwork';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000023 - Prevent Windows from sending an error report when a device driver requests additional software during installation must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Settings' ; $value ='DisableSendRequestAdditionalSoftwareToWER';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000020 - Do not send a Windows error report when a generic driver is installed on a device must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Settings' ; $value ='DisableSendGenericDriverNotFoundToWER';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000021 - Prevent creation of a system restore point during device activity that would normally prompt creation of a restore point must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DeviceInstall\\Settings' ; $value ='DisableSystemRestore';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000024 - Specify search order for device driver source locations must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value ='SearchOrderConfig';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000025 - Specify the search server for device driver updates must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value ='DriverServerSelection';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000018 - Specify settings for optional component installation and component repair must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Servicing' ; $value ='UseWindowsUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000011 - Set IP Stateless Autoconfiguration Limits State must be enabled",
                "query": "$key= 'HKLM:\\\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters' ; $value ='EnableIPAutoConfigurationLimits';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000010 - Set Teredo State must be enabled:Disabled State",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition' ; $value ='Teredo_State';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000008 - Set IP-HTTPS State must be enabled:Disabled State",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition\\IPHTTPS\\IPHTTPSInterface' ; $value ='IPHTTPS_ClientState';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000009 - Set Set ISATAP State must be enabled:Disabled State",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition' ; $value ='ISATAP_State';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000007 - Set 6to4 State must be enabled:Disabled State",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\TCPIP\\v6Transition' ; $value ='6to4_State';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000016 - Extend Point and Print connection to search Windows Update must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Printers' ; $value ='DoNotInstallCompatibleDriverFromWindowsUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000068 - Enable/Disable PerfTrack must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\WDI\\{9c5a40da-b965-4fc3-8781-88dd50a6299d}' ; $value ='ScenarioExecutionEnabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000067 - Troubleshooting: Allow users to access online troubleshooting content on Microsoft servers from the Troubleshooting Control Panel (via Windows Online Troubleshooting Service - WOTS) must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\ScriptedDiagnosticsProvider\\Policy' ; $value ='EnableQueryRemoteServer';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000064 - Restrict Unauthenticated RPC clients must be enabled and Authenticated",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Rpc' ; $value ='RestrictRemoteClients';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000063 - Enable RPC Endpoint Mapper Client Authentication must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Rpc' ; $value ='EnableAuthEpResolution';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000065 - Detect compatibility issues for applications and drivers must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\AppCompat' ; $value ='DisablePcaUI';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000114 - Do not send additional data must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Windows Error Reporting' ; $value ='DontSendAdditionalData';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000112 - Disable Logging must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Windows Error Reporting' ; $value ='LoggingDisabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000111 - Configure Microsoft Active Protection Service Reporting must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows Defender\\Spynet' ; $value ='SpyNetReporting';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000119 -  Report when logon server was not available during user logon must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value ='ReportControllerMissing';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $ValuePresent=\"NO\"; $KeyValue=\"n/a\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000086 - Specify the maximum log size (KB) to at minimum  must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\EventLog\\Setup' ; $value ='MaxSize';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000026 - Turn off Windows Update device driver search prompt must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value ='DontPromptForWindowsUpdate';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000118 - Prohibit non-administrators from applying vendor signed updates must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\DriverSearching' ; $value ='DriverServerSelection';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000075 - Allow the use of biometrics must be disabled",
                "query": "$key= 'HKLM:\\\\SOFTWARE\\Policies\\Microsoft\\Biometrics' ; $value ='Enabled';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000071 - Turn off Inventory Collector must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\AppCompat' ; $value ='DisableInventory';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000070 - Allow all trusted apps to install must be enabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows\\Appx' ; $value ='AllowAllTrustedApps';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000073 - Set the default behavior for AutoRun to enabled",
                "query": "$key= 'HKLM:\\\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer' ; $value ='NoAutorun';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000106 - Turn on Basic feed authentication over HTTP must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Internet Explorer\\Feeds' ; $value ='AllowBasicAuthInClear';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-CC-000103 - Do not delete temp folder upon exitDo not delete temp folder upon exit must be disabled",
                "query": "$key= 'HKLM:\\\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services' ; $value ='DeleteTempDirsOnExit';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-RG-000003 - Local administrator accounts must have their privileged token filtered to prevent elevated privileges from being used over the network on domain systems.",
                "query": "$key= 'HKLM:\\\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' ; $value ='LocalAccountTokenFilterPolicy';  $KeyPresent=Test-Path $key ; if ($KeyPresent -eq $False){ $KeyPresent=\"NO\"; $ValuePresent='n/a'; $KeyValue=\"n/a\"; } else { $KeyPresent=\"YES\"; Try{ $KeyValue = (Get-ItemProperty -Path $key -Name $value -ErrorAction Stop) | Select -ExpandProperty $value; $ValuePresent = \"YES\"; } catch{ $KeyValue=\"n/a\"; $ValuePresent=\"NO\"; } }  $obj = New-Object psobject; $obj | add-member -Type Noteproperty \"KEY PRESENT\" -Value $KeyPresent; $obj | add-member -Type Noteproperty \"VALUE PRESENT\" -Value $ValuePresent; $obj | add-member -Type Noteproperty \"VALUE\" -Value $keyValue ; $obj;"
            },
            {
                "description": "[STIG: Registry Test] WN12-UC-000005 - Turn off notifications network usage must be enabled",
                "query": "$objArray = @(); $RegistryPath = 'SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\PushNotifications'; $RegistryValues = @{ 'NoCloudApplicationNotification' = '1'    } ;    if (!(Get-PSDrive HKU -ErrorAction SilentlyContinue))   {      New-PSDrive -Name HKU -PSProvider Registry -Root Registry::HKEY_USERS | Out-Null  } ;      $sids = get-childItem HKU: | ? {$_.Name -match 'S-\\d-\\d+-(\\d+-){1,14}\\d+$' } | % { $_.Name.Replace('HKEY_USERS\\','') };          $sids | foreach {           $sid = $_;        $objSID = New-Object System.Security.Principal.SecurityIdentifier (\"$sid\");         $objUser = $objSID.Translate( [System.Security.Principal.NTAccount]);             if (($RegistryValues.GetEnumerator() |        where { ((Get-ItemProperty \"HKU:$sid\\$RegistryPath\" -Name $_.Key -ErrorAction SilentlyContinue).($_.Key) -eq $_.Value) }).Count -eq $RegistryValues.Count)             {  $obj=new-object psobject;            $obj | Add-Member -type NoteProperty -name \"UserName\" -Value $objUser.Value;            $obj | Add-Member -type NoteProperty -name \"RegistryConfigured\" -Value $True;             $objArray += $obj;  }                                        else {              $obj=new-object psobject;                                    $obj | Add-Member -type NoteProperty -name \"UserName\" -Value $objUser.Value;             $obj | Add-Member -type NoteProperty -name \"RegistryConfigured\" -Value $false; $objArray += $obj; }; } ; $objArray | Select UserName,RegistryConfigured",
                "key_name": "Id"
            },
            {
                "description": "Policy Version",
                "query": "echo \"20171006-6\""
            }
        ]
    }
}